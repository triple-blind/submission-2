$Header: //MyDataDepot/Projects/provenance-autoType2/servers/TrustedServer/README#1 $

The infamous Trusted server lives here.  For background on what it does,
please read "Provenance Server.doc" in the README project.  It receives
commands from the Haathi extension (or TrustedServerTest) and processes them.
It _should_ also be (remotely) connected to the Provenance server, but that
connection is presently implemented by simply sharing the database.  That
database is currently provided by SQLite and is set in getDataAccessor() of
TrustedCommandProcessor.  You'll see the other option there of a
TrustedEC2DynamoDataAccessor there.  Since the AWS version was last working,
Amazon updated its interface.  All of the TrustedServer code was updated to
compile against the new interface, but it has never actually run or been
tested.  It is recommended that a TrustedEC2DynamoDataAccessorTest project
be used to test the interface if it ever needs to be used again.

NOTE: TrustedServer lets the client (Haathi) know the location of the
Provenance server via authenticateUser() in the DataAccessor.  It is hard-coded,
in TrustedServer and passed in the constructor to the TrustedCommandProcessor
which passes it as an argument to authenticateUser() only to be returned.
So, if you can log on to the Trusted server, but can't save the document to
the Provenance server, it could be that the values of the Provenance
address and port aren't set correctly in TrustedServer.
