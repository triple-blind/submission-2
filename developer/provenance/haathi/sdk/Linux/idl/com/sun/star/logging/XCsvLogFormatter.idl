/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/




#ifndef __com_sun_star_logging_XCsvLogFormatter_idl__
#define __com_sun_star_logging_XCsvLogFormatter_idl__

#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_logging_XLogFormatter_idl__
#include <com/sun/star/logging/XLogFormatter.idl>
#endif

//=============================================================================

module com { module sun { module star { module logging { 

//=============================================================================

/** specifies the interface used for formatting log records for RFC4180 csv 
	output

    @see XLogFormatter, XLogHandler
 
    @since OOo 3.0
*/
interface XCsvLogFormatter : XLogFormatter
{
	/** Defines if the EventNo should be logged */
	[attribute] boolean LogEventNo;
	/** Defines if the ThreadId should be logged */
	[attribute] boolean LogThread;
	/** Defines if the Timestamp should be logged */
	[attribute] boolean LogTimestamp;
	/** Defines if the Source should be logged */
	[attribute] boolean LogSource;
	/** Defines the names of the additional columns 
		this defaults to only one row titled "message".
		if this is set to more than one column, the 
		messages need to be preformatted using
		<code>formatMultiColumn</code>*/
	[attribute] sequence< string >  Columnnames;
	/** if the CsvLogFormatter is set to have more than one
		column, any logged infomation has to be send through this 
		method before calling log(). E.g.:

		<code>XLoggerInstance.log(1000, XCsvLogFormatterInstance.formatMultiColumn(column_data))</code>
	*/
	string formatMultiColumn( [in] sequence< string > column_data);
};

//=============================================================================

}; }; }; }; 

//=============================================================================

#endif
