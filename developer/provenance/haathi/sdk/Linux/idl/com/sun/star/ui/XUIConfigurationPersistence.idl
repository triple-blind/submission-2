/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_ui_XUIConfigurationPersistence_idl__
#define __com_sun_star_ui_XUIConfigurationPersistence_idl__

#ifndef __com_sun_star_embed_XStorage_idl__
#include <com/sun/star/embed/XStorage.idl>
#endif

module com { module sun { module star { module ui {

/** specifies a persistence interface which supports to load/store user
    interface configuration data to a storage and to retrieve information
    about the current state.

    @since OOo 2.0
*/

published interface XUIConfigurationPersistence : ::com::sun::star::uno::XInterface
{
    /** reloads the configuration data from the storage and reinitialize
        the user interface configuration manager instance with this data.

        <p>
        It is up to the implementation if it defers the first loading process
        until the first data request using <type>XUIConfigurationManager</type>
        interface.
        </p>
    */
    void reload() raises ( ::com::sun::star::uno::Exception );

    /** stores the configuration data to the storage provided by
        <member>setStorage</member> from the storage and initialize the
        user interface configuration manager instance with the newly
        data. This call can throw an
        <type scope="com::sun::star::io">IOException</type> if
        <member>store</member> cannot store its data into the internal
        storage.
    */
    void store() raises ( ::com::sun::star::uno::Exception );

    /** stores the configuration data to the provided storage, ignoring
        the previously set storage by <member>setStorage</member>. Can
        be used to make copy of the current user interface configuration
        data to another storage. This call will throw an
        <type scope="com::sun::star::io">IOException</type> if the provided
        storage is in read-only mode.

        @param Storage
            all configuration data will be stored to this storage.
    */
    void storeToStorage( [in] ::com::sun::star::embed::XStorage Storage ) raises ( ::com::sun::star::uno::Exception );

    /** provides the current modify state of the configuration manager
        instance.

        @return
            <TRUE/> if the configuration manager has changed since the
            last <member>store</member> call. <FALSE/> if the configuration
            manager has not been changed.
    */
    boolean isModified();

    /** provides the current read-only state of the user configuration
        manager. Storing a user interface configuration to a read-only storage
        is not possible. A read-only configuration manager instance will also
        not support any changes to its configuration settings.

        @return
            <TRUE/> if the configuration manager storage is read-only otherwise
            <FALSE/>.
    */
    boolean isReadOnly();
};

//=============================================================================

}; }; }; };

#endif
