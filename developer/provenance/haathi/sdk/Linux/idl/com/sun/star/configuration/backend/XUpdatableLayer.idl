/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_configuration_backend_XUpdatableLayer_idl__
#define __com_sun_star_configuration_backend_XUpdatableLayer_idl__

#ifndef __com_sun_star_configuration_backend_XLayer_idl__
#include <com/sun/star/configuration/backend/XLayer.idl>
#endif

#ifndef __com_sun_star_lang_NullPointerException_idl__
#include <com/sun/star/lang/NullPointerException.idl>
#endif 

#ifndef __com_sun_star_lang_WrappedTargetException_idl__
#include <com/sun/star/lang/WrappedTargetException.idl>
#endif 

#ifndef __com_sun_star_configuration_backend_MalformedDataException_idl__
#include <com/sun/star/configuration/backend/MalformedDataException.idl>
#endif

//==============================================================================

module com { module sun { module star { module configuration { module backend {

//==============================================================================

/**
  Provides access to a read-write layer of configuration data for
  a given component and entity.

    @since OOo 1.1.2
  */
published interface XUpdatableLayer : XLayer 
{
    //--------------------------------------------------------------------------

	/**
	   Replaces the current layer with the layer given as input
	   parameter.

       <p> After the replacement has been performed, reading the
           layer will return the new content. Some implementations 
           may not support this, so after an update
           <member>XLayer::readData()</member> may fail.
        </p>

       @param aNewLayer 
               replacement layer

       @throws com::sun::star::lang::NullPointerException
               if a <NULL/> handler is passed.
       @throws com::sun::star::lang::WrappedTargetException
               if an error occurs during the replacement.
       @throws com::sun::star::configuration::backend::MalformedDataException
               if the layer contains invalid data.
	 */
	void replaceWith([in] XLayer aNewLayer) 
        raises (com::sun::star::lang::NullPointerException,
                com::sun::star::lang::WrappedTargetException,
                MalformedDataException) ;

    //--------------------------------------------------------------------------
} ;

} ; } ; } ; } ; } ;
#endif
