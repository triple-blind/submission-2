/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_io_XOutputStream_idl__ 
#define __com_sun_star_io_XOutputStream_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_io_NotConnectedException_idl__ 
#include <com/sun/star/io/NotConnectedException.idl> 
#endif 
 
#ifndef __com_sun_star_io_BufferSizeExceededException_idl__ 
#include <com/sun/star/io/BufferSizeExceededException.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XOutputStream
/** This is the basic interface to write data to a stream.
    <p>
    See the <a href="http://udk.openoffice.org/common/man/concept/streams.html">
    streaming document</a> for further information on chaining and piping streams.
 */
published interface XOutputStream: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XOutputStream::writeBytes
	/** writes the whole sequence to the stream. (blocking call)
	 */
	void writeBytes( [in] sequence<byte> aData ) 
			raises( com::sun::star::io::NotConnectedException, 
					com::sun::star::io::BufferSizeExceededException, 
					com::sun::star::io::IOException); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XOutputStream::flush
	/** flushes out of the stream any data that may exist in buffers.

        <p>The semantics of this method are rather vague.  See
        <member scope="com::sun::star::io">
        XAsyncOutputMonitor::waitForCompletion</member> for a similar method
        with very specific semantics, that is useful in certain scenarios.</p>
	 */
	void flush() 
			raises( com::sun::star::io::NotConnectedException, 
					com::sun::star::io::BufferSizeExceededException, 
					com::sun::star::io::IOException); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XOutputStream::closeOutput
	/** gets called to indicate that all data has been written. 
		
		<p>If this method has not yet been called, no attached 
		<type>XInputStream</type> receives an EOF signal. No further
		bytes may be written after this method has been called.</p>
	 */
	void closeOutput() 
			raises( com::sun::star::io::NotConnectedException, 
					com::sun::star::io::BufferSizeExceededException, 
					com::sun::star::io::IOException); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
