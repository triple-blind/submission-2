/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_awt_tree_XTreeDataModelListener_idl__
#define __com_sun_star_awt_tree_XTreeDataModelListener_idl__

#ifndef __com_sun_star_lang_XEventListener_idl__
#include <com/sun/star/lang/XEventListener.idl>
#endif

#ifndef __com_sun_star_awt_tree_TreeDataModelEvent_idl__
#include <com/sun/star/awt/tree/TreeDataModelEvent.idl>
#endif


//=============================================================================

module com {  module sun {  module star {  module awt {  module tree {

//=============================================================================

/** An instance of this interface is used by the <type>TreeControl</type> to
    get notifications about data model changes.

    <p>Usually you must not implement this interface yourself as it is already handled
    by the <type>TreeControl</type>, but you must notify it correctly if
    you implement the <type>XTreeDataModel</type> yourself</p>.
 */
published interface XTreeDataModelListener: com::sun::star::lang::XEventListener
{
    /** Invoked after a node (or a set of siblings) has changed in some way.
        The node(s) have not changed locations in the tree or altered their
        children arrays, but other attributes have changed and may affect
        presentation.

        Example: the name of a file has changed, but it is in the same location in the file system.

        To indicate the root has changed, <member>TreeDataModelEvent::Nodes</member> will contain
        the root node and <member>TreeDataModelEvent::ParentNode</member> will be empty.
    */
    void treeNodesChanged( [in] TreeDataModelEvent Event );

    /** Invoked after nodes have been inserted into the tree.

        Use <member>TreeDataModelEvent::ParentNode</member> to get the parent of the new node(s).
        <member>TreeDataModelEvent::Nodes</member> contains the new node(s).
    */
    void treeNodesInserted( [in] TreeDataModelEvent Event );

    /** Invoked after nodes have been removed from the tree.
        <p>Note that if a subtree is removed from the tree,
        this method may only be invoked once for the root of the removed subtree,
        not once for each individual set of siblings removed.

        Use <member>TreeDataModelEvent::ParentNode</member> to get the former parent of the deleted node(s).
        <member>TreeDataModelEvent::Nodes</member> contains the removed node(s).
    */
    void treeNodesRemoved( [in] TreeDataModelEvent Event );

    /** Invoked after the tree has drastically changed structure from a given node down.

        Use <member>TreeDataModelEvent::ParentNode</member> to get the node which
        structure has changed. <member>TreeDataModelEvent::Nodes</member> is empty.
    */
    void treeStructureChanged( [in] TreeDataModelEvent Event );
};

//=============================================================================

}; }; }; }; };

#endif
