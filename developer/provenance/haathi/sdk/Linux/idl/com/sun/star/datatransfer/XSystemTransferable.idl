/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_datatransfer_XSystemTransferable_idl__
#define __com_sun_star_datatransfer_XSystemTransferable_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

//=============================================================================

module com { module sun { module star { module datatransfer {

//=============================================================================
/** Interface to be implemented by  objects used to provide system dependent data
	for a transfer operation. Those objects usually also implement <type>XTransferable</type>.
*/

published interface XSystemTransferable: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** Called by a data consumer to obtain a system specific data object from the
		source.
		The data object is returned in an any. The contained type may differ on
		different platforms.

		@param aProcessId
		The argument aProcessId is a process identifier of the caller's process.		
		The interface implementation must ensure that the system data object can be
		used in that process. If the data object is not valid in the caller process
		then the returned any must be empty.

		@returns
		The system dependent data object.

		<br/><br/><p><strong>Notes:</strong>Under Windows the returned any contains an unsigned long which represents a pointer to
		an IDataObject interface. The caller of getData has to release the data
		object (IDataObject::Release) if it is no longer needed.
		The caller must also make sure that the current thread has been initialized for
		OLE (use OleInitialize).</p>
	*/
	any getData( [in] sequence < byte > aProcessId);
};
 
}; }; }; }; 

#endif
