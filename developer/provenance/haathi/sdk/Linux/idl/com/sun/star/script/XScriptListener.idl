/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_script_XScriptListener_idl__ 
#define __com_sun_star_script_XScriptListener_idl__ 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
#ifndef __com_sun_star_script_ScriptEvent_idl__ 
#include <com/sun/star/script/ScriptEvent.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_InvocationTargetException_idl__ 
#include <com/sun/star/reflection/InvocationTargetException.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module script {  
 
//============================================================================= 
/** makes it possible to receive <type>ScriptEvent</type>s.
 */
published interface XScriptListener: com::sun::star::lang::XEventListener
{ 
	//------------------------------------------------------------------------- 
	/** gets called when an event takes place.  For that a 
		<type>ScriptEventDescriptor</type> is registered at and
		attached to an object by an <type>XEventAttacherManager</type>.
	 */
	void firing( [in] com::sun::star::script::ScriptEvent aEvent ); 
 
	//------------------------------------------------------------------------- 
	/** gets called when a "vetoable event" occurs at the object.
	 */
	any approveFiring( [in] com::sun::star::script::ScriptEvent aEvent ) 
			raises( com::sun::star::reflection::InvocationTargetException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
