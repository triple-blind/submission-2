/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_task_XAsyncJob_idl__
#define __com_sun_star_task_XAsyncJob_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_beans_NamedValue_idl__
#include <com/sun/star/beans/NamedValue.idl>
#endif

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module task {

 published interface XJobListener;

//=============================================================================
/** specifies a job which must be executed asynchronously

    <p>
    Instead of <type>XJob</type> the implementation of this interface
    must be aware, that execution can be made real asynchronous (e.g. by using
    threads). Because the environment whish to have creation and using of threads
    under control, it's not allowed for a real job implementation to use such mechanism
    by itself. The outside code decide, if it's possible and how it can be made
    asynchronous. In some special cases it can be, that asynchronous jobs will be executed
    synchronously.
    </p>

    @see XJob
*/
published interface XAsyncJob : com::sun::star::uno::XInterface
{
    //------------------------------------------------------------------------
	/** executes the job asynchronously

        @param Arguments
            are arguments for executing the job. Their semantics is completely implementation dependent. Usually,
            a concrete implementation of a job specifies in its service descriptions which parameters are allowed
            (or expected). This values are persistent by the configuration of the <type>JobExecutor</type>
            which use this asynchronous job. It's possible to write it back by called listener
            function <member>XJobListener::jobFinished()</member>.

        @param Listener
            specifies a listener which should be notified on events. May be <NULL/>.

        @throws com::sun::star::lang::IllegalArgumentException
            if some of given arguments doesn't fill out the service specification or
            was corrupt so the service couldn't work correctly
	*/
   void executeAsync(
        [in] sequence< com::sun::star::beans::NamedValue > Arguments,
        [in] XJobListener Listener)
            raises( com::sun::star::lang::IllegalArgumentException );
};

}; }; }; };

#endif

