/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_configuration_backend_XBackendEntities_idl__
#define __com_sun_star_configuration_backend_XBackendEntities_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif 

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif 
#ifndef __com_sun_star_configuration_backend_BackendAccessException_idl__
#include <com/sun/star/configuration/backend/BackendAccessException.idl>
#endif 

//============================================================================= 

module com { module sun { module star { module configuration { module backend {

//============================================================================= 

/** 
  Provides functionality relating to common and supported entities 
  for a configuration data backend. 
 
  @see com::sun::star::configuration::backend::XBackend
  @see com::sun::star::configuration::backend::XMultiLayerStratum

  @since OOo 1.1.2
*/
published interface XBackendEntities : ::com::sun::star::uno::XInterface 
{
	//------------------------------------------------------------------------- 

    /** 
        provides the entity id of the owner entity of the backend.

        @returns   
            an entity identifier for the owner entity.
            <p> The owner entity is the default entity for the backend. 
               For normal configuration data access the owner entity 
               should always be used. 
            </p>

        @see com::sun::star::configuration::backend::XBackend::listOwnLayers()
        @see com::sun::star::configuration::backend::XBackend::getOwnUpdateHandler()
	*/
    string getOwnerEntity() ;

	//------------------------------------------------------------------------- 

    /** 
        provides the entity id of an entity for general administrative access.

        <p> The admin entity is an entity that should be used to 
           read and manage configuration data that applies to all entities 
           within the backend.  
        </p>

        @returns   
            an entity identifier for the admin entity or 
            an empty string, if there is no entity that can be used for 
            general administrative access.

	*/
    string getAdminEntity() ;

	//------------------------------------------------------------------------- 

    /** 
        determines, if a given entity id exists in this backend.
      
        @param aEntity    
            The name of an entity. 

        @throws   com::sun::star::configuration::backend::BackendAccessException
                if an error occurs while accessing the backend.
  
        @returns 
            <TRUE/>, if aEntity is a valid, existing entity for this backend, 
            <FALSE/> otherwise.
	*/
    boolean supportsEntity([in] string aEntity) 
        raises( BackendAccessException );

	//------------------------------------------------------------------------- 

    /** 
        determines, if two given entity ids denote the same entity.

        @param aEntity    
            The name of an entity. 

        @param aOtherEntity    
            The name of another entity. 

        @returns 
            <TRUE/>, if aEntity and aOtherEntity denote the same entity 
            within this backend, <FALSE/> otherwise.

        @throws   com::sun::star::configuration::backend::BackendAccessException
                if an error occurs while accessing the backend.
  
        @throws   com::sun::star::lang::IllegalArgumentException
            if either entity does not exist.
	*/
    boolean isEqualEntity([in] string aEntity, [in] string aOtherEntity) 
        raises( BackendAccessException, com::sun::star::lang::IllegalArgumentException) ;

	//------------------------------------------------------------------------- 
} ;

//============================================================================= 

} ; } ; } ; } ; } ;

#endif 
