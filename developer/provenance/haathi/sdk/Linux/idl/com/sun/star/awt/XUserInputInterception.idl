/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_awt_XUserInputInterception_idl__
#define __com_sun_star_awt_XUserInputInterception_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_awt_XKeyHandler_idl__
#include <com/sun/star/awt/XKeyHandler.idl>
#endif

#ifndef __com_sun_star_awt_XMouseClickHandler_idl__
#include <com/sun/star/awt/XMouseClickHandler.idl>
#endif

module com {  module sun {  module star {  module awt {

/** Interface to add handlers for key and mouse events. A handler is not a passive
   listener, it can even consume the event.
   
    @since OOo 1.1.2
 */
published interface XUserInputInterception : ::com::sun::star::uno::XInterface
{
    /** Add a new listener that is called on <type
        scope="::com::sun::star::awt">KeyEvent</type>s.  Every listener is
        given the opportunity to consume the event, i.e. prevent the not yet
        called listeners from being called.
        @param xHandler
            If this is a valid reference it is inserted into the list of
            handlers.  It is the task of the caller to not register the
            same handler twice (otherwise that listener will be called
            twice.)
    */
	[oneway] void addKeyHandler (
        [in] ::com::sun::star::awt::XKeyHandler xHandler);


    /** Remove the specified listener from the list of listeners.
        @param xHandler
            If the reference is empty then nothing will be changed.  If the
            handler has been registered twice (or more) then all refrences
            will be removed.
    */
	[oneway] void removeKeyHandler (
        [in] ::com::sun::star::awt::XKeyHandler xHandler);

    /** Add a new listener that is called on <type
        scope="::com::sun::star::awt">MouseEvent</type>s.  Every listener is
        given the opportunity to consume the event, i.e. prevent the not yet
        called listeners from being called.
        @param xHandler
            If this is a valid reference it is inserted into the list of
            handlers.  It is the task of the caller to not register the
            same handler twice (otherwise that listener will be called
            twice.)
    */
	[oneway] void addMouseClickHandler (
        [in] ::com::sun::star::awt::XMouseClickHandler xHandler);

    /** Remove the specified listener from the list of listeners.
        @param xHandler
            If the reference is empty then nothing will be changed.  If the
            handler has been registered twice (or more) then all refrences
            will be removed.
    */
	[oneway] void removeMouseClickHandler (
        [in] ::com::sun::star::awt::XMouseClickHandler xHandler);
};

}; }; }; };

#endif
