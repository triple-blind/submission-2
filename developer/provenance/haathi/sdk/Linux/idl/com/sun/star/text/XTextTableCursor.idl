/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_text_XTextTableCursor_idl__
#define __com_sun_star_text_XTextTableCursor_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif


//=============================================================================

module com {  module sun {  module star {  module text {

//=============================================================================

/** The TextTableCursor provide methods to navigate throught the table structure, to merge and split cells

    @see com::sun::star::text::TextTable
    @see com::sun::star::text::TextTableCursor
    @see com::sun::star::text::Cell
    @see com::sun::star::text::XTextTable
 */
published interface XTextTableCursor: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------

	/** @returns
				the name of the cell range that is selected by this cursor.
				<p>The name is the cell name of the top left table cell of the range
			 	contatenated by ':' with the table cell name of the bottom left table cell of the cell range.
				If the range consists of one table cell only then the name of that table cell is returned.
			 </p>
        @see com::sun:star::text::CellRange
	 */
	string getRangeName();

	//-------------------------------------------------------------------------

	/** moves the cursor to the cell with the specified name.

		@param aCellName
			specifies the name of the cell to go to.

		@param bExpand
			determines wether the selection is to be expanded.

        @see com::sun::star::text::Cell
	 */
	boolean gotoCellByName( [in] string aCellName,
			 [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** moves the cursor to the left neighbor.

		@param nCount
			the number of cells to move.

		@param bExpand
			determines wether the selection is to be expanded.
	 */
	boolean goLeft( [in] short nCount,
			 [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** moves the cursor to the right neighbor.

		@param nCount
			the number of cells to move.

		@param bExpand
			determines wether the selection is to be expanded.
	 */
	boolean goRight( [in] short nCount,
			 [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** moves the cursor to the top neighbor.

		@param nCount
			the number of cells to move.

		@param bExpand
			determines wether the selection is to be expanded.
	 */
	boolean goUp( [in] short nCount,
			 [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** moves the cursor to the bottom neighbor cell.

		@param nCount
			the number of cells to move.

		@param bExpand
			determines wether the selection is to be expanded.
	 */
	boolean goDown( [in] short nCount,
			 [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** moves the cursor to the top left cell of the table.

		@param bExpand
			determines wether the selection is to be expanded.
	 */
	void gotoStart( [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** moves the cursor to the bottom right cell of the table.

		@param bExpand
			determines wether the selection is to be expanded.
	 */
	void gotoEnd( [in] boolean bExpand );

	//-------------------------------------------------------------------------

	/** merges the selected range of cells.

        @see com:sun::star::CellRange
	 */
	boolean mergeRange();

	//-------------------------------------------------------------------------

	/** splits the range of cells.

		@param nCount
			specifies the number of new cells that will be created
			for each cell contained in the range.

        @param bHorizontal
            <true/> if the range should be split vertically.
            Otherwise it will be split horizontally.

        @see com:sun::star::Cell
        @see com:sun::star::CellRange
	 */
	boolean splitRange( [in] short nCount,
			 [in] boolean bHorizontal );

};

//=============================================================================

}; }; }; };

#endif
