/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_form_runtime_XFilterControllerListener_idl__
#define __com_sun_star_form_runtime_XFilterControllerListener_idl__

#include <com/sun/star/lang/XEventListener.idl>
#include <com/sun/star/form/runtime/FilterEvent.idl>

//=============================================================================

module com { module sun { module star { module form { module runtime {

//=============================================================================

/** is implemented by components listening for events fired by an <type>XFilterController</type>.

    @since OOo 3.3
*/
interface XFilterControllerListener : ::com::sun::star::lang::XEventListener
{
    /** is fired when a single <em>predicate expression</em> of the filter represented by the filter
        controller changed.

        <p><member>FilterEvent::DisjunctiveTerm</member> is the index of the <em>disjunctive term</em> in which the
        expression changed. This usually equals <member>XFilterController::ActiveTerm</member>.</p>

        <p><member>FilterEvent::FilterComponent</member> denotes the index of the filter component whose
        <em>predicate expression</em> changed.</p>

        <p><member>FilterEvent::PredicateExpression</member> is the new <em>predicate expressions</em>.</p>
    */
    void    predicateExpressionChanged( [in] FilterEvent _Event );

    /** is fired when a <em>disjunctive term</em> was removed from the filter of the filter controller.

        <p><member>FilterEvent::DisjunctiveTerm</member> is the index of the <em>disjunctive term</em> which was
        removed.</p>

        <p><member>FilterEvent::FilterComponent</member> and <member>FilterEvent::PredicateExpression</member> are not
        used for this event type.</p>
    */
    void    disjunctiveTermRemoved( [in] FilterEvent _Event );

    /** is fired when a <em>disjunctive term</em> was added to the filter of the filter controller.

        <p><member>FilterEvent::DisjunctiveTerm</member> is the index of the <em>disjunctive term</em> which was
        added.</p>

        <p><member>FilterEvent::FilterComponent</member> and <member>FilterEvent::PredicateExpression</member> are not
        used for this event type.</p>
    */
    void    disjunctiveTermAdded( [in] FilterEvent _Event );
};

//=============================================================================

}; }; }; }; }; 

//=============================================================================

#endif
