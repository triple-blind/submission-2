/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_drawing_Shape_idl__
#define __com_sun_star_drawing_Shape_idl__

#ifndef __com_sun_star_document_LinkTarget_idl__
#include <com/sun/star/document/LinkTarget.idl>
#endif

#ifndef __com_sun_star_drawing_XShape_idl__
#include <com/sun/star/drawing/XShape.idl>
#endif

#ifndef __com_sun_star_lang_XComponent_idl__
#include <com/sun/star/lang/XComponent.idl>
#endif

#ifndef __com_sun_star_style_XStyle_idl__
#include <com/sun/star/style/XStyle.idl>
#endif

#ifndef __com_sun_star_drawing_HomogenMatrix3_idl__
#include <com/sun/star/drawing/HomogenMatrix3.idl>
#endif

#ifndef __com_sun_star_drawing_XGluePointsSupplier_idl__
#include <com/sun/star/drawing/XGluePointsSupplier.idl>
#endif

#ifndef __com_sun_star_container_XNameContainer_idl__
#include <com/sun/star/container/XNameContainer.idl>
#endif

#ifndef __com_sun_star_beans_XTolerantMultiPropertySet_idl__
#include <com/sun/star/beans/XTolerantMultiPropertySet.idl>
#endif

//=============================================================================

 module com {  module sun {  module star {  module drawing {

//=============================================================================

/** This abstract service specifies the general characteristics of all
	<type>Shape</type>s.

	@see XShape
	@see com::sun::star::lang::XComponent
	@see com::sun::star::text::XText
	@see ShapeDescriptor
 */
published service Shape
{
	//-------------------------------------------------------------------------

	/** handles all the properties of this instance.
	 */
	interface com::sun::star::beans::XPropertySet;

	//-------------------------------------------------------------------------

	/** This gives you the size and position of this <type>Shape</type>
				and lets you change it. You can use <member>getShapeType</member>
				to determine what kind of shape this is.
	 */
	interface com::sun::star::drawing::XShape;

	//-------------------------------------------------------------------------

	/** is used for lifetime control of this <type>Shape</type>.
	 */
	interface com::sun::star::lang::XComponent;

	//-------------------------------------------------------------------------

	/** The <type>XShapeDescriptor</type> tells you what kind of
				<type>Shape</type> this instance is.
	 */
	interface com::sun::star::drawing::XShapeDescriptor;

	//-------------------------------------------------------------------------

	/** This interfaces gives access to an optional container of glue points.
		To have unique ids you should query the returned interface for
		<type scope="com::sun::star::container">XIdentifierContainer</type>.
	*/
	[optional] interface com::sun::star::drawing::XGluePointsSupplier;

	//-------------------------------------------------------------------------

        [optional] interface com::sun::star::beans::XTolerantMultiPropertySet;

	//-------------------------------------------------------------------------

	/** is used to query or change the ZOrder of this <type>Shape</type>. */
	[optional, property] long ZOrder;

	//-------------------------------------------------------------------------

	/** This is the ID of the <type>Layer</type> to which this
		<type>Shape</type> is attached.
	 */
	[optional, property] short LayerID;

	//-------------------------------------------------------------------------

	/** This is the name of the <type>Layer</type> to which this
		<type>Shape</type> is attached.
	 */
	[optional, property] string LayerName;

	//-------------------------------------------------------------------------

	/** If this is <FALSE/>, the <type>Shape</type> is not visible
		on screen outputs. Please note that the <type>Shape</type> may still
		be visible when printed, see <member>Printable</member>.
	 */
	[optional, property] boolean Visible; 

	//-------------------------------------------------------------------------

	/** If this is <FALSE/>, the <type>Shape</type> is not visible
		on printer outputs.
	 */
	[optional, property] boolean Printable;

	//-------------------------------------------------------------------------

	/** With this set to <TRUE/>, this <type>Shape</type>
		cannot be moved interactively in the user interface.
	 */
	[optional, property] boolean MoveProtect;

	//-------------------------------------------------------------------------

	/** This is the name of this <type>Shape</type>.
	 */
	[optional, property] string Name;

	//-------------------------------------------------------------------------

	/** With this set to <TRUE/>, this <type>Shape</type> may not be
		sized interactively in the user interface.
	 */
	[optional, property] boolean SizeProtect;

	//-------------------------------------------------------------------------

	/** this property lets you get and set a style for this shape.
	 */
	[optional, property] com::sun::star::style::XStyle Style;

	//-------------------------------------------------------------------------

	/** this property lets you get and set the transformation matrix
		for this shape.

		The transformation is a 3x3 homogen matrix and can contain
		translation, rotation, shearing and scaling.
	 */
	[optional, property] com::sun::star::drawing::HomogenMatrix3 Transformation;

	//-------------------------------------------------------------------------

	/** this property stores xml attributes.
		They will be saved to and restored from automatic styles inside xml files.

		@see com::sun::star::xml::AttributeContainer
	*/
	[optional, property] com::sun::star::container::XNameContainer ShapeUserDefinedAttributes;

	//-------------------------------------------------------------------------

	/** this property stores the navigation order of this shape. If this value
		is negative, the navigation order for this shapes page is equal to
		the z-order.
	*/
	[optional, property] long NavigationOrder;
};

//=============================================================================

}; }; }; };

#endif

