/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_rendering_XCanvasFont_idl__
#define __com_sun_star_rendering_XCanvasFont_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif
#ifndef __com_sun_star_geometry_RealRectangle2D_idl__
#include <com/sun/star/geometry/RealRectangle2D.idl>
#endif
#ifndef __com_sun_star_rendering_FontRequest_idl__
#include <com/sun/star/rendering/FontRequest.idl>
#endif
#ifndef __com_sun_star_rendering_FontMetrics_idl__
#include <com/sun/star/rendering/FontMetrics.idl>
#endif
#ifndef __com_sun_star_rendering_RenderState_idl__
#include <com/sun/star/rendering/RenderState.idl>
#endif
#ifndef __com_sun_star_rendering_ViewState_idl__
#include <com/sun/star/rendering/ViewState.idl>
#endif
#ifndef __com_sun_star_rendering_StringContext_idl__
#include <com/sun/star/rendering/StringContext.idl>
#endif

#ifndef __com_sun_star_beans_PropertyValue_idl__
#include <com/sun/star/beans/PropertyValue.idl>
#endif


module com { module sun { module star { module rendering {

published interface XCanvas;
published interface XTextLayout;
published interface XPolyPolygon2D;

/** This interface provides access to a specific, XCanvas-dependent
    font incarnation. This font is not universally usable, but belongs
    to the XCanvas it was queried from.
 */
published interface XCanvasFont : ::com::sun::star::uno::XInterface
{
    /** Create a text layout interface.<p>

        Create a text layout interface for the given string, using
        this font to generate the glyphs from.<p>

        @param aText
        The text to layout.

        @param nDirection
        Main text direction for the string specified. The main text
        direction is e.g. important for characters that are not
        strong, i.e. that change affinity according to the current
        writing direction. Make sure that across text portions and
        lines, the direction is set consistently.

        @param nRandomSeed
        Optional random seed for OpenType glyph variations.
     */
    XTextLayout											createTextLayout( [in] StringContext aText, [in] byte nDirection, [in] hyper nRandomSeed );

    //-------------------------------------------------------------------------

    /** Query the FontRequest that was used to generate this object.
     */
    FontRequest											getFontRequest();

    //-------------------------------------------------------------------------

    /** Query metric information about the font, that is generic to
        all its glyphs.<p>

        Note that the metric values in the returned result are in the
        font coordinate system, i.e. relative to the corresponding
        size of this font. That is, when this font was created with a
        cell size of 20 units, the metrics returned are calculated
        relative to this size.
     */
    FontMetrics											getFontMetrics();

    //-------------------------------------------------------------------------

    /** Query the list of available font sizes.<p>

        This method queries the list of available font sizes (in
        device units) for this font. For scalable fonts that are not
        restricted to discrete sizes, this list is <em>empty</em>,
        meaning that every size is possible. Fonts that <em>do</em>
        restrict the device size to certain discrete values, setting
        an overall transformation that scales the
        <member>FontRequest::CellSize</member> to something not
        contained in the list returned by this method can lead to
        visible disturbances.<p>
     */
    sequence< double >                                      getAvailableSizes();

    //-------------------------------------------------------------------------

    /** Query the list of additional font properties.<p>
     */
    sequence< ::com::sun::star::beans::PropertyValue >	getExtraFontProperties();

    //-------------------------------------------------------------------------

};

}; }; }; };

#endif

