/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_view_XRenderable_idl__ 
#define __com_sun_star_view_XRenderable_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_beans_PropertyValue_idl__ 
#include <com/sun/star/beans/PropertyValue.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
#endif 
 
//============================================================================= 
 
module com {  module sun {  module star {  module view {  
 
//============================================================================= 
 
/** represents something that can be rendered.

    @since OOo 1.1.2
 */
published interface XRenderable : com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	/** @returns 
			the count of renderers (based on paper count of a document, for example). 
			
		<p> If a selection is given, the count has to be calculated 
			based on this selection. The other methods of this interface
			will rely on this value if called.
			
        <p> If the selection contains a valid XModel interface, 
			it is assumed that the whole document should be rendered.
			If the selection is empty, nothing should be rendered.

		@see RenderOptions
	 */
	long getRendererCount( [in] any aSelection, [in] sequence<com::sun::star::beans::PropertyValue> xOptions )
			raises( com::sun::star::lang::IllegalArgumentException ); 
 
	//------------------------------------------------------------------------- 
	 
	/** @returns 
			a descriptor of the specific renderer. 
		 
		<p> returns the specific renderer properties based on the given selection. 
		
        <p> If the selection contains a valid XModel interface, 
			it is assumed that the whole document should be rendered.
			If the selection is empty, nothing should be rendered.
		 
		@see RenderDescriptor
		@see RenderOptions
	 */
	sequence<com::sun::star::beans::PropertyValue> getRenderer( [in] long nRenderer, [in] any aSelection, [in] sequence<com::sun::star::beans::PropertyValue> xOptions )
			raises( com::sun::star::lang::IllegalArgumentException ); 
 
	//------------------------------------------------------------------------- 
	 
	/** renders the object.

		<p> renders the object with the specific renderer based on the given selection. 

        <p> If the selection contains a valid XModel interface, 
			it is assumed that the whole document should be rendered.
			If the selection is empty, nothing should be rendered.

		@see RenderOptions
	 */
	void render( [in] long nRenderer, [in] any aSelection, [in] sequence<com::sun::star::beans::PropertyValue> xOptions ) 
			raises( com::sun::star::lang::IllegalArgumentException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
