/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_beans_XPropertyState_idl__ 
#define __com_sun_star_beans_XPropertyState_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_beans_PropertyState_idl__ 
#include <com/sun/star/beans/PropertyState.idl> 
#endif 
 
#ifndef __com_sun_star_beans_UnknownPropertyException_idl__ 
#include <com/sun/star/beans/UnknownPropertyException.idl> 
#endif 
 
#ifndef __com_sun_star_lang_WrappedTargetException_idl__ 
#include <com/sun/star/lang/WrappedTargetException.idl> 
#endif 
 
#ifndef __com_sun_star_beans_XPropertyStateChangeListener_idl__ 
#include <com/sun/star/beans/XPropertyStateChangeListener.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module beans {  
 
//============================================================================= 
 
/** makes it possible to query information about the state of 
	one or more properties.
	
	<p>The state contains the information if:</p>
	<ul>
		<li>a value is available or void</li> 
		<li>the value is stored in the object itself, or if a default value is to be used</li>
		<li>and if the value cannot be determined, due to ambiguity
			(multi selection with multiple values).</li>
	</ul>
 */
published interface XPropertyState: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	/** @returns  
				the state of the property. 
				 
		@param	aPropertyName  
			specifies the name of the property. 
				 
		@throws UnknownPropertyException	 
			if the property does not exist.
	 */
	com::sun::star::beans::PropertyState getPropertyState( [in] string PropertyName ) 
			raises( com::sun::star::beans::UnknownPropertyException ); 
 
	//------------------------------------------------------------------------- 
	 
	/** @returns 
			a sequence of the states of the properties which are specified 
				by their names. 
		 
		<p>The order of the states is correlating to the order of the  
		given property names. </p>

		@param aPropertyNames
			contains the sequence of property names.

		@throws UnknownPropertyException
			if one property does not exist.
	 */
	sequence<com::sun::star::beans::PropertyState> getPropertyStates(  
			[in] sequence<string> aPropertyName ) 
		raises( com::sun::star::beans::UnknownPropertyException ); 
 
	//------------------------------------------------------------------------- 
	 
	/** Sets the property to default value. 
		
		<p>The value depends on the implementation of this interface. 
		If it is a bound property, you must change the value before 
		the change events are fired.  If it is a constrained property, you 
		must fire the vetoable event before you change the property value.
		</p>

		@param aPropertyname
			specifies the name of the property.

		@throws UnknownPropertyException
			if the property does not exist.
	 */
	void setPropertyToDefault( [in] string PropertyName ) 
			raises( com::sun::star::beans::UnknownPropertyException ); 
 
	//------------------------------------------------------------------------- 
	 
	/** @returns 
			the default value of the property with the name PropertyName.  
				 
		<p>If no default exists, is not known or is void, 
		then the return type is <atom>void</atom>. 
				 
		@param aPropertyName	 
			specifies the name of the property. 
			 
		@throws UnknownPropertyException	 
			if the property does not exist. 
			 
		@throws  com::sun::star::lang::WrappedTargetException  
			if the implementation has an internal reason for the exception. 
			In this case the original exception is wrapped into that 
			<type scope="com::sun::star::lang">WrappedTargetException</type>.
	 */
	any getPropertyDefault( [in] string aPropertyName ) 
			raises( com::sun::star::beans::UnknownPropertyException, 
					com::sun::star::lang::WrappedTargetException ); 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
