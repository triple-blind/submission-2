/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_reflection_XIdlMethod_idl__ 
#define __com_sun_star_reflection_XIdlMethod_idl__ 
 
#ifndef __com_sun_star_reflection_XIdlMember_idl__ 
#include <com/sun/star/reflection/XIdlMember.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_ParamInfo_idl__ 
#include <com/sun/star/reflection/ParamInfo.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_MethodMode_idl__ 
#include <com/sun/star/reflection/MethodMode.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_InvocationTargetException_idl__ 
#include <com/sun/star/reflection/InvocationTargetException.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module reflection {  
 
 published interface XIdlClass; 
 
//============================================================================= 
 
/** Reflects an IDL interface method.
*/
published interface XIdlMethod: com::sun::star::reflection::XIdlMember
{ 
	/** Returns the return type of the reflected method.

        @return
                return type of reflected method
    */
	XIdlClass getReturnType(); 
    
	/** Returns the formal parameter types of the reflected method in order of IDL
        declaration.

        @return
                formal parameter types of reflected method
    */
	sequence<XIdlClass> getParameterTypes();
    
	/** Returns formal parameter informations of the reflected method
        in order of IDL declaration.
        Parameter information reflects the parameter's access mode (in, out, inout),
        the parameter's name and formal type.
        
        @return
                parameter informations of reflected method
    */
	sequence<ParamInfo> getParameterInfos(); 
    
	/** Returns the declared exceptions types of the reflected method.

        @return
                declared exception types of reflected method
    */
	sequence<com::sun::star::reflection::XIdlClass> getExceptionTypes(); 
    
	/** Returns the method mode in which calls are run, i.e. either oneway or
        twoway.  Method mode oneway denotes that a call may be run asynchronously
        (thus having no out parameters or return value)
        
        @return
                method mode of reflected method
    */
	com::sun::star::reflection::MethodMode getMode(); 
    
	/** Invokes the reflected method on a given object with the given parameters.
        The parameters may be widening converted to fit their exact IDL type,
        meaning no loss of information.
        
        @param obj
               object to call on
        @param args
               arguments passed to the method
        @return
                return value of the method call (may be empty for methods returning void)
                
        @throws IllegalArgumentException
        if the given object is a nuull reference or does not support the reflected
        method's interface
        @throws IllegalArgumentException
        if the given number of arguments differ from the expected number
        or the given arguments' types differ from the expected ones (even a
        widening conversion was not possible)
        @throws InvocationTargetException
        if the reflected method that has been invoked has thrown an exception.
        The original exception will be wrapped up and signalled by the
        InvocationTargetException
    */
	any invoke(
        [in] any obj, 
        [inout] sequence<any> args ) 
        raises( com::sun::star::lang::IllegalArgumentException, 
                com::sun::star::reflection::InvocationTargetException );
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
