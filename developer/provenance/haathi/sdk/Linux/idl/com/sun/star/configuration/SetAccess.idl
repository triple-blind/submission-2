/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_configuration_SetAccess_idl__
#define __com_sun_star_configuration_SetAccess_idl__

#ifndef __com_sun_star_configuration_HierarchyAccess_idl__
#include <com/sun/star/configuration/HierarchyAccess.idl>
#endif

#ifndef __com_sun_star_configuration_SimpleSetAccess_idl__
#include <com/sun/star/configuration/SimpleSetAccess.idl>
#endif

#ifndef __com_sun_star_container_XContainer_idl__
#include <com/sun/star/container/XContainer.idl>
#endif

//=============================================================================

module com { module sun { module star { module configuration { 

//=============================================================================
/** provides access to a dynamic, homogeneous set of values or nested
 trees within a hierarchy.

 <p>Also provides information about the template for elements.
 Allows normalizing externally generated names.
 </p>
 
 <p><em>Sets</em> are dynamic containers within the hierarchy.</p>

 <p>The number and names of contained elements are not fixed in advance,
 but all elements have to be of one predetermined type.
 </p>

 @see com::sun::star::configuration::SetElement
	Child objects of this service generally implement <type>SetElement</type>.
	The template name returned by the child from
	<member>XTemplateInstance::getTemplateName()</member>
	corresponds to the name returned by the set from
	<member>XTemplateContainer::getElementTemplateName()</member>.

 @see com::sun::star::configuration::GroupAccess
	A complementary service that provides for static heterogeneous groups of
	elements within the hierarchy.

*/
published service SetAccess
{
/** is the basic service for accessing child and descendent nodes in a hierarchy.

 <p>External names (from foreign namespaces) should be normalized using
 <member scope="com::sun::star::util">XStringEscape::escapeString()</member>
 (if available) before using them as element names.
 </p>
*/
	service HierarchyAccess;

/** is the basic service providing information about and access to elements
 of a not necessarily hierarchical <em>set</em>.

 <p>Interface <type scope="com::sun::star::configuration">XTemplateContainer</type>,
 which is optional in <type>SimpleSetAccess</type> must always be implemented
 in this service, if the elements are of object type.  </p>
*/
	service SimpleSetAccess;

/** allows attaching listeners to this node to monitor changes to the set.

 <p>In this service, support for notifications is mandatory.
 </p>
*/
	interface com::sun::star::container::XContainer;

};

//=============================================================================

}; }; }; }; 

#endif
