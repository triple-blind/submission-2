/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_auth_XSSOAcceptorContext_idl__
#define __com_sun_star_auth_XSSOAcceptorContext_idl__

#ifndef __com_sun_star_auth_XSSOContext_idl__
#include <com/sun/star/auth/XSSOContext.idl>
#endif

#ifndef __com_sun_star_auth_SSOExceptions_idl__
#include <com/sun/star/auth/SSOExceptions.idl>
#endif

module com { module sun { module star { module auth {

/** represents an acceptor side security context.
	<P>This context may be used to authenticate a Single Signon initiator based
	   on a security token sent by the intiator and to generate a token to be
	   sent back to the initiator so that it can authenticate the acceptor.

    @since OOo 1.1.2
*/

published interface XSSOAcceptorContext : ::com::sun::star::auth::XSSOContext
{
	/** accepts/authenticates an SSO token sent from the context initiator side.
		<P>
		accept() should be called only once. Subsequent calls produce
		undefined results.	
		
		@param Token
		the SSO token sent by the initiator.

		@returns
		the sequence of bytes to be sent back to the initiator to allow
		authentication of the acceptor side, if mutual authentication is
		supported by the security context. If mutual authentication is not
		supported a zero length sequence is returned.
	 */

	sequence< byte >	accept(	[in] sequence< byte > Token )
		raises( InvalidArgumentException,
				InvalidCredentialException,
				InvalidContextException,
				AuthenticationFailedException );
};

}; }; }; };

#endif
