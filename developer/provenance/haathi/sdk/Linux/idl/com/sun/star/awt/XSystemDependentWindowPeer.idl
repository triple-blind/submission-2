/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_awt_XSystemDependentWindowPeer_idl__ 
#define __com_sun_star_awt_XSystemDependentWindowPeer_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif


//============================================================================= 
 
 module com {  module sun {  module star {  module awt {  
 
//============================================================================= 
 
/** provides access to the system dependent implementation of the window.

    @see com::sun::star::lang::SystemDependent 
	@see WindowAttribute 
	@see WindowAttribute::SYSTEMDEPENDENT
 */
published interface XSystemDependentWindowPeer: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	/** returns a system-specific window handle.

        @returns  
		a sytem-specific handle to a window  
		or 0 if the window is not in the same process. 
				 
		<p>You must check the machine ID and the process ID.<BR> 
		WIN32: Returns an HWND if possible, otherwise 0.<BR> 
		WIN16: Returns an HWND if possible, otherwise 0.<BR> 
				 
		JAVA: Returns a global reference to a java.awt.Component 
		object provided from the JNI-API.<BR> 
				 
		OS2: Returns an HWND if possible, otherwise 0.<BR> 

		MAC: Returns a ptr to the NSView implementing the window.<BR> 
				 
		XWINDOW: Returns a structure SystemDependentXWindow
        or void if it is not reachable.<BR></p>
				 
		@param ProcessId 
		the process identifier. Use the sal_getGlobalProcessId 
		function of the RTL library. 
				 
		@param SystemType 
		one constant out of the constant group 
		<type scope="com::sun::star::lang">SystemDependent</type>.
	 */
	any getWindowHandle( [in] sequence< byte > ProcessId, [in] short SystemType ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
