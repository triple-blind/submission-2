/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __offapi_com_sun_star_view_XFormLayerAccess_idl__
#define __offapi_com_sun_star_view_XFormLayerAccess_idl__

#ifndef __com_sun_star_view_XControlAccess_idl__ 
#include <com/sun/star/view/XControlAccess.idl>
#endif
#ifndef __com_sun_star_form_XForm_idl__ 
#include <com/sun/star/form/XForm.idl>
#endif
#ifndef __com_sun_star_form_runtime_XFormController_idl__ 
#include <com/sun/star/form/runtime/XFormController.idl>
#endif
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif

//=============================================================================

module com { module sun { module star { module view { 

//=============================================================================

/** provides access to the form layer elements in a view

    @since OOo 2.3
 */
interface XFormLayerAccess
{
    /// provides access to form controls contained in the view
    interface XControlAccess;

    /** returns the <type scope="com::sun::star::form">FormController</type>
        instance which operates on a given form.

        <p>A form controller is a component which controls the user interaction
        with the form layer, as long as the form is not in design mode.</p>

        @return
            the requested form controller, or <NULL/> if the view's
            form layer is currently in design mode. Note that the returned
            instance becomes non-functional as soon as the form layer is switched
            to design mode.

        @see isDesignMode
        @see setDesignMode
        @see ::com::sun::star::form::runtime::FormController
        @see ::com::sun::star::form::runtime::FormOperations
    */
    ::com::sun::star::form::runtime::XFormController
        getFormController(
            [in] ::com::sun::star::form::XForm Form
        );

    /** determines whether the view's form layer is currently in design
        or alive mode

        <p><em>Note</em>: This is a convenience method. In the user interface,
        the design mode is coupled with the <code>.uno:SwitchControlDesignMode</code>
        feature (see <type scope="com::sun::star::frame">XDispatchProvider</type>),
        and asking for the current mode is the same as asking for the state of this
        feature.</p>
    */
    boolean isFormDesignMode();

    /** determines whether the view's form layer is currently in design
        or alive mode

        <p><em>Note</em>: This is a convenience method. In the user interface,
        the design mode is coupled with the <code>.uno:SwitchControlDesignMode</code>
        feature (see <type scope="com::sun::star::frame">XDispatchProvider</type>),
        and changing the current mode is the same as dispatching this feature URL.</p>
    */
    void    setFormDesignMode( [in] boolean DesignMode );
};

//=============================================================================

}; }; }; };

//=============================================================================

#endif
