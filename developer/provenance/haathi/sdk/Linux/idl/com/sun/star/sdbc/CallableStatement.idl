/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_sdbc_CallableStatement_idl__ 
#define __com_sun_star_sdbc_CallableStatement_idl__ 
 
#ifndef __com_sun_star_sdbc_PreparedStatement_idl__ 
#include <com/sun/star/sdbc/PreparedStatement.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
 published interface XRow; 
 published interface XOutParameters; 
 
 
/** is used to execute SQL stored procedures.
	
	
	<p>
	SDBC provides a stored procedure SQL escape that allows stored procedures
	to be called in a standard way for all RDBMSs. This escape syntax has one
	form that includes a result parameter and one that does not. If used, the
	result parameter must be registered as an OUT parameter. The other parameters
	can be used for input, output, or both. Parameters are referred to sequentially,
	by number. The first parameter is 1.
	</p>
	<p>
	<code>{?=call&amp;lt;procedure-name&amp;gt;[&amp;lt;arg1&amp;gt;,&amp;lt;arg2&amp;gt;,...]}<br/>{call&amp;lt;procedure-name&amp;gt;[&amp;lt;arg1&amp;gt;,&amp;lt;arg2&amp;gt;,...]}
	</code>
	</p>
	<p>
	IN parameter values are set using the set methods inherited from
	<type scope="com::sun::star::sdbc">PreparedStatement</type>
	. The type of all
	OUT parameters must be registered prior to executing the stored procedure;
	their values are retrieved after execution via the 
	<code>get</code>
	methods
	provided by the 
	<type scope="com::sun::star::sdbc">XRow</type>
	.
	</p>
	<p>
	A 
	<code>CallableStatement</code>
	can return one
	<type scope="com::sun::star::sdbc">XResultSet</type>
	or multiple
	<type scope="com::sun::star::sdbc">ResultSet</type>
	objects. Multiple 
	<code>ResultSet</code>
	objects are
	handled using operations inherited from
	<type scope="com::sun::star::sdbc">XPreparedStatement</type>
	.
	</p>
	<p>
	For maximum portability, a call's 
	<type scope="com::sun::star::sdbc">ResultSet</type>
	objects and
	update counts should be processed prior to getting the values of output
	parameters.
	</p>
*/
published service CallableStatement
{ 
	service PreparedStatement; 
 
	 
	/** is used for retrieve the values of OUT parameters.
	 */
	interface XRow; 
 
	 
	/** is used to declare parameters as OUT parameters.
	 */
	interface XOutParameters; 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
