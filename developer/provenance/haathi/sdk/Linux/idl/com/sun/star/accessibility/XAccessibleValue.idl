/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_accessibility_XAccessibleValue_idl__
#define __com_sun_star_accessibility_XAccessibleValue_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

module com { module sun { module star { module accessibility {

/** Implement this interface to give access to a single numerical value.

    <p>The <type>XAccessibleValue</type> interface represents a single
    numerical value and should be implemented by any class that supports
    numerical value like scroll bars and spin boxes.  This interface lets
    you access the value and its upper and lower bounds.</p>

    @since OOo 1.1.2
*/
published interface XAccessibleValue : ::com::sun::star::uno::XInterface
{
    /** Returns the value of this object as a number.
        
        <p>The exact return type is implementation dependent.  Typical types
        are long and double.</p>
        
        @return
            Returns the current value represented by this object.
    */
    any getCurrentValue ();

    /** Sets the value of this object to the given number.
        
        <p>The argument is clipped to the valid interval whose upper and
        lower bounds are returned by the methods
        <member>getMaximumAccessibleValue</member> and
        <member>getMinimumAccessibleValue</member>, i.e. if it is lower than
        the minimum value the new value will be the minimum and if it is
        greater than the maximum then the new value will be the maximum.</p>
        
        @param aNumber
            The new value represented by this object.  The set of admissible
            types for this argument is implementation dependent.
            
        @return
            Returns <TRUE/> if the new value could successfully be set and
            <FALSE/> otherwise.
    */
    boolean setCurrentValue ([in] any aNumber);
    
    /** Returns the maximal value that can be represented by this object.
        
        <p>The type of the returned value is implementation dependent.  It
        does not have to be the same type as that returned by
        <member>getCurrentAccessibleValue</member>.</p>
        
        @return
            Returns the maximal value in an implementation dependent type.
            If this object has no upper bound then an empty object is
            returned.
    */
    any getMaximumValue ();

    /** Returns the minimal value that can be represented by this object.
        
        <p>The type of the returned value is implementation dependent.  It
        does not have to be the same type as that returned by
        <member>getCurrentAccessibleValue</member>.</p>
        
        @return
            Returns the minimal value in an implementation dependent type.
            If this object has no upper bound then an empty object is
            returned.
    */
    any getMinimumValue ();
};
          
}; }; }; };

#endif
