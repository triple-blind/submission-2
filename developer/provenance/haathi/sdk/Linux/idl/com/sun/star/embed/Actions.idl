/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_embed_Actions_idl__
#define __com_sun_star_embed_Actions_idl__

//============================================================================

module com { module sun { module star { module embed {

//============================================================================
/** This constant set contains possible actions that could be approved by
<type>ActionsApproval</type> implementation. 
*/
published constants Actions
{
	//------------------------------------------------------------------------
	/** "Prevent Close" - throws veto excetion if target object is going to
		close.

		<p> 
		Usually a <type scope="com::sun::star::util">XCloseListener</type>
		implementation could use this constant to request approval to throw
		veto exception.
		</p>
	 */
	const long PREVENT_CLOSE = 1;

	//------------------------------------------------------------------------
	/** "Prevent Termination" - throws veto excetion if target object is going
		to terminate.

		<p> 
		Usually a <type scope="com::sun::star::frame">XTerminateListener</type>
		implementation could use this constant to request approval to throw
		veto exception.
		</p>
	 */
	const long PREVENT_TERMINATION = 2;
};

//============================================================================

}; }; }; };

#endif

