/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_lang_XUnoTunnel_idl__ 
#define __com_sun_star_lang_XUnoTunnel_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module lang {  
 
//============================================================================= 
 
/** An interface to tunnel UNO. This means providing access to data or
    something else, which is not specified by UNO-IDL.

    @attention
    Restrictive useage.  Use only, if there is no better possibility left.
    It is definitely a hack.
    
    <p>
    Common usage:
    Getting a C++ object pointer in the same process, thus to use an
    implementation directly, most often because of a design flaw.
    </p>
*/
published interface XUnoTunnel: com::sun::star::uno::XInterface
{ 
	/** Call this method to get something which is not specified in UNO, e.g.
        an address to some C++ object.

        @attention
		The identifier specifies how the return value is to be reinterpreted.
        The identifier must be globally unique, because it is unknown where
        the implementation resides.

        @param aIdentifier
               identifier
        @return
                something
    */
	hyper getSomething( [in] sequence< byte > aIdentifier );
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
