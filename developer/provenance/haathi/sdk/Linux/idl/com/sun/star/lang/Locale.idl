/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_lang_Locale_idl__
#define __com_sun_star_lang_Locale_idl__

#include <com/sun/star/uno/XInterface.idl>


//=============================================================================

module com {  module sun {  module star {  module lang {

//=============================================================================

// DocMerge from xml: struct com::sun::star::lang::Locale
/** object represents a specific geographical, political, or cultural region.

	<p>An operation that requires a <code>Locale</code> to perform
	its task is called <em>locale-sensitive</em> and uses the
	<code>Locale</code> to tailor information for the user. For example,
	displaying a number is a locale-sensitive operation; the number
	should be formatted according to the customs/conventions of the
	user's native country, region, or culture.  </p>

	<p> Because a <code>Locale</code> object is just an identifier for a
	region, no validity check is performed.  If you want to see whether
	particular resources are available for the <code>Locale</code>, use
	the <method scope="com::sun::star::resource">XLocale::getAvailableLocales</method> method to ask for the
	locales it supports.</p>

	<p> <strong>Note:</strong> When you ask for a resource for a
	particular locale, you get the best available match, not necessarily
	precisely what you asked for. For more information, see
	<type scope="com::sun::star::resource">XResourceBundle</type>.</p>

	<p> Each implementation that performs locale-sensitive operations
	allows you to get all the available objects of that type. Use the
	<typed scope="com::sun::star::resource">XLocale</type> interface to set the locale. </p>
 */
published struct Locale
{
	// DocMerge from xml: field com::sun::star::lang::Locale::Language
	/** specifies an <strong>ISO Language Code</strong>.

		<p>These codes are the lower-case two-letter codes as defined by
		ISO-639. You can find a full list of these codes at a number of
		sites, such as: <br>
		<a href="http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt">
		<code>http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt</code></a>.
		</p>

		<p>If this field contains an empty string, the meaning depends on the
		context.</p>
	 */
	string Language;

	//-------------------------------------------------------------------------

	// DocMerge from xml: field com::sun::star::lang::Locale::Country
	/** specifies an <strong>ISO Country Code.</strong>

		<p>These codes are the upper-case two-letter codes as
		defined by ISO-3166.  You can find a full list of these codes at a
		number of sites, such as: <br>
		<a href="http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html">
		<code>http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html</code></a>.
		</p>

		<p>If this field contains an empty string, the meaning depends on the
		context.</p>
	 */
	string Country;

	//-------------------------------------------------------------------------

	// DocMerge from xml: field com::sun::star::lang::Locale::Variant
	/** contains a variant of the locale; codes are vendor and
		browser-specific.

		<p>For example, use WIN for Windows, MAC for Macintosh, and POSIX
		for POSIX. Wherever there are two variants, separate them with an
		underscore, and put the most important one first. For example, a
		traditional Spanish collation might construct a locale with parameters
		for language, country and variant as: "es", "ES", "Traditional_WIN".</p>
	 */
	string Variant;

};


//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif
