/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_resource_XStringResourceWithStorage_idl__
#define __com_sun_star_resource_XStringResourceWithStorage_idl__

#ifndef __com_sun_star_resource_XStringResourcePersistence_idl__ 
#include <com/sun/star/resource/XStringResourcePersistence.idl> 
#endif


//=============================================================================

module com { module sun { module star { module resource { 

//=============================================================================
/** 
	Extends <type>XStringResourcePersistence</type> by methods to handle an 
	associated <type scope="com::sun::star::embed">XStorage</type> instance.

	@see <type>XStringResourcePersistence</type>.
*/
interface XStringResourceWithStorage: com::sun::star::resource::XStringResourcePersistence
{
	/**
		Stores all string table data to a storage and associates this storage 
		to this instance as if <member>setStorage</member> was called with 
		this storage. The modified state will be unmodified after the call.

		This method can throw all exceptions thrown by the methods of
		<type scope="com::sun::star::embed">XStorage</type>
    */
    void storeAsStorage( [in] ::com::sun::star::embed::XStorage Storage )
		raises( com::sun::star::uno::Exception );

	
	/**
		Associates a storage to the StringResourceWithStorage instance 
		which is used on subsequent calls of <member>store</member>.
        
        @param Storage
			the storage to be associated to the StringResourceManager

        <p>
        This call has to be used carefully as it removes the storage
		previously connected to the StringResourceWithStorage. It may 
		force the implementation to reload data from the previous storage
		before releasing it. The StringResourceManager will be modified
		after calling this method as the data isn't stored to the new 
		storage yet. <member>storeAsStorage</member> should be prefered
		as it directly stores the data to the new storage and afterwards
		this storage is in sync with the resource data.
        </p>

		@throws <type scope="com::sun::star::lang">IllegalArgumentException</type>
			if a null interface is passed as Storage
    */
    void setStorage( [in] ::com::sun::star::embed::XStorage Storage )
		raises( ::com::sun::star::lang::IllegalArgumentException );
};

//=============================================================================

}; }; }; }; 

#endif
