/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_plugin_XPluginContext_idl__ 
#define __com_sun_star_plugin_XPluginContext_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_plugin_XPlugin_idl__ 
#include <com/sun/star/plugin/XPlugin.idl> 
#endif 
 
#ifndef __com_sun_star_plugin_PluginVariable_idl__ 
#include <com/sun/star/plugin/PluginVariable.idl> 
#endif 
 
#ifndef __com_sun_star_plugin_PluginException_idl__ 
#include <com/sun/star/plugin/PluginException.idl> 
#endif 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
#ifndef __com_sun_star_io_XActiveDataSource_idl__ 
#include <com/sun/star/io/XActiveDataSource.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module plugin {  
 
//============================================================================= 
 
/** Interface receiving calls from a plugin library.	
    A default context can be created using the <type>PluginManager</type>.
*/
published interface XPluginContext: com::sun::star::uno::XInterface
{ 
	/** Requests global application parameters like display connection
        on UNIX systems.

        @param xPlugin
               plugin
        @param aVariable
               variable
        @return value
    */
	string getValue( [in] com::sun::star::plugin::XPlugin xPlugin, 
			 [in] com::sun::star::plugin::PluginVariable aVariable ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Requests a notification of completion of the operation on an URL.

        @param plugin
               plugin
        @param url
               url
        @param target
               target frame
        @param listener
               event listener
    */
	void getURLNotify( [in] com::sun::star::plugin::XPlugin plugin, 
			 [in] string url, 
			 [in] string target, 
			 [in] com::sun::star::lang::XEventListener listener ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Requests an URL to be loaded into the frame target.

        @param plugin
               plugin
        @param url
               url
        @param target
               target frame
    */
	void getURL( [in] com::sun::star::plugin::XPlugin plugin, 
			 [in] string url, 
			 [in] string target ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Posts data from a buffer or file to an URL and receives a
		notification upon completion.

        @param plugin
               plugin
        @param url
               url
        @param target
               target frame
        @param buf
               data
        @param file
               whether data is from file
        @param listener
               event listener
    */
	void postURLNotify( [in] com::sun::star::plugin::XPlugin plugin, 
			 [in] string url, 
			 [in] string target, 
			 [in] sequence<byte> buf, 
			 [in] boolean file, 
			 [in] com::sun::star::lang::XEventListener listener ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Posts data from a buffer or file to an URL.

        @param plugin
               plugin
        @param url
               url
        @param target
               target frame
        @param buf
               data
        @param file
               whether data is from file
    */
	void postURL( [in] com::sun::star::plugin::XPlugin plugin, 
			 [in] string url, 
			 [in] string target, 
			 [in] sequence<byte> buf, 
			 [in] boolean file ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Requests a new stream that is created by the plugin and consumed
		by the browser.

        @param plugin
               plugin
        @param mimetype
               mime type
        @param target
               target frame
        @param aSource
               data source
    */
	void newStream( [in] com::sun::star::plugin::XPlugin plugin, 
			 [in] string mimetype, 
			 [in] string target, 
			 [in] com::sun::star::io::XActiveDataSource aSource ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Displays a message in the browser status line.
        
        @param plugin
               plugin
        @param message
               message
    */
	void displayStatusText( [in] com::sun::star::plugin::XPlugin plugin, 
			 [in] string message ) 
			raises( com::sun::star::plugin::PluginException ); 
 
	/** Returns an application dependent identification string.
		This is the same string that is transmitted by a browser to an http server.

        @param plugin
               plugin
		@return id
    */
	string getUserAgent( [in] com::sun::star::plugin::XPlugin plugin ) 
			raises( com::sun::star::plugin::PluginException ); 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
