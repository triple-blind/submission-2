/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_drawing_framework_XResourceFactoryManager_idl__
#define __com_sun_star_drawing_framework_XResourceFactoryManager_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

module com { module sun { module star { module drawing { module framework {

published interface XResourceId;
published interface XResourceFactory;

/** The XResourceFactoryManager is part of the configuration controller and
    manages the set of registered resource factories.

    @see XConfigurationController
    @see XResourceFactory
*/
published interface XResourceFactoryManager
{
    /** Register a new resource factory for the given URL.
        <p>When one factory is responsible for more than one type of resource
        then this method has to be called for each type.  If this method is
        called multiple times for the same URL then a previously registered
        factory is removed for the URL.</p>
        @param sResourceURL
            The URL of the resource that the factory can create.
        @param xResourceFactory
            The resource factory object.
    */
    void addResourceFactory (
        [in] string sResourceURL,
        [in] XResourceFactory xResourceFactory);

    /** Remove a resource factory for one type of resource.  When the
        factory has been registered for other URLs as well then it remains
        registered for them.  Use the
        <member>removeResourceFactoryForReference()</member> to remove a
        factory completely.
        @param sResourceURL
            The URL for which to remove the resource factory.
    */
    void removeResourceFactoryForURL (
        [in] string sResourceURL);

    /** Remove a resource factory for all resource types it has been registered for.  Use
        <member>removeResourceFactoryForURL</member> to remove a factory
        just for one resource type and to leave it registered for others.
        @param xResourceFactory
            The resource factory object to remove.
    */
    void removeResourceFactoryForReference (
        [in] XResourceFactory xResourceFactory);

    /** Return the resource factory that was previously registered for the
        given resource type.  This method is typically called by one of the
        resource controllers.
        @param sResourceURL
            The URL of the resource type for which to return the resource
            factory.
        @return
            When no resource factory was registered for the given resource
            type then an empty reference is returned.
    */
    XResourceFactory getResourceFactory (
        [in] string sResourceURL);
};

}; }; }; }; }; // ::com::sun::star::drawing::framework

#endif
