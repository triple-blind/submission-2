/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_bridge_OleBridgeSupplierVar1_idl__ 
#define __com_sun_star_bridge_OleBridgeSupplierVar1_idl__ 
 
#ifndef __com_sun_star_bridge_OBridgeSupplier2_idl__ 
#include <com/sun/star/bridge/OleBridgeSupplier2.idl> 
#endif


 module com {  module sun {  module star {  module bridge {  
 

/** maps UNO types to COM types and vice versa. It is optimized for use in a
     remote szenario. <p> 
The functionality is basically the same as
<type scope="com::sun::star::bridge">OleBridgeSupplier2</type>.
However, the implementation should be optimized for remote access. For example, it could
try to reduce the calls into the remote process. Also it could create components on its own behalf in the remote process, if this increases performance.

@deprecated
*/
published service OleBridgeSupplierVar1
{
	service OleBridgeSupplier2;

};
 
//============================================================================= 
 
}; }; }; };  
 

#endif 
