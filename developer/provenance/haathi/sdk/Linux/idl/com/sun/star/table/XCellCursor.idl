/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_table_XCellCursor_idl__
#define __com_sun_star_table_XCellCursor_idl__

#ifndef __com_sun_star_table_XCellRange_idl__
#include <com/sun/star/table/XCellRange.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module table {

//=============================================================================

/** provides methods to control the position of a cell cursor.

	@see com::sun::star::table::CellCursor
 */
published interface XCellCursor: com::sun::star::table::XCellRange
{
	//-------------------------------------------------------------------------

	/** points the cursor to a single cell which is the beginning of a
		contiguous series of (filled) cells.
	 */
	void gotoStart();

	//-------------------------------------------------------------------------

	/** points the cursor to a single cell which is the end of a contiguous
		series of (filled) cells.
	 */
	void gotoEnd();

	//-------------------------------------------------------------------------

	/** points the cursor to the next unprotected cell.

		<p>If the sheet is not protected, this is the next cell to the
		right.</p>
	 */
	void gotoNext();

	//-------------------------------------------------------------------------

	/** points the cursor to the previous unprotected cell.

		<p>If the sheet is not protected, this is the next cell to the
		left.</p>
	 */
	void gotoPrevious();

	//-------------------------------------------------------------------------

	/** moves the origin of the cursor relative to the current position.

		@param nColumnOffset
			is the count of columns to move. A negative value moves the
			cursor to the left.

		@param nRowOffset
			is the count of rows to move. A negative value moves the
			cursor to the top.
	 */
	void gotoOffset( [in] long nColumnOffset, [in] long nRowOffset );

};

//=============================================================================

}; }; }; };

#endif

