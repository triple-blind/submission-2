/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_embed_XClassifiedObject_idl__
#define __com_sun_star_embed_XClassifiedObject_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_lang_NoSupportException_idl__
#include <com/sun/star/lang/NoSupportException.idl>
#endif


//============================================================================

 module com {  module sun {  module star {  module embed {

//============================================================================
/** represents common functionality for embedded objects
 */
published interface XClassifiedObject: com::sun::star::uno::XInterface
{
	// -----------------------------------------------------------------------
    /** retrieves class ID of the object.
		
		@return
			unique class ID of the object
	 */
	sequence< byte > getClassID();

	// -----------------------------------------------------------------------
    /** retrieves symbolic name for the object type to be used in UI.
		
		@return
			the symbolic name for the object
	 */
	string getClassName();

	// -----------------------------------------------------------------------
    /** sets the class ID and symbolic name to an object.
		
		@param aClassID
			the new class ID

		@param sClassName
			the new symbolic name

		@throws ::com::sun::star::lang::NoSupportException
			in case changing of class information is not allowed
	 */
	void setClassInfo(  [in] sequence< byte > aClassID,
						[in] string sClassName )
		raises( ::com::sun::star::lang::NoSupportException );
};

//=============================================================================

}; }; }; };

#endif

