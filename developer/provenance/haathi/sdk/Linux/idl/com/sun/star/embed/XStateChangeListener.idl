/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_embed_XStateChangeListener_idl__ 
#define __com_sun_star_embed_XStateChangeListener_idl__ 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
#ifndef __com_sun_star_lang_EventObject_idl__ 
#include <com/sun/star/lang/EventObject.idl> 
#endif 
 
#ifndef __com_sun_star_embed_WrongStateException_idl__ 
#include <com/sun/star/embed/WrongStateException.idl> 
#endif 
 
//============================================================================
 
module com {  module sun {  module star {  module embed {  
 
//============================================================================
 
/** makes it possible to receive events when an embedded object changes it's
	state.
 */
published interface XStateChangeListener: com::sun::star::lang::XEventListener
{ 
	//------------------------------------------------------------------------
	/** is called just before the object changes state.

		<p>
		Actually the listener can try to complain about state changing, but
		it is up to object to decide whether the state change can be
		prevented. Anyway the possibility to complain must be used very
		carefully.
		</p>

		@param aEvent
			specifies the object that is going to change own state

		@param nOldState
			specifies the old state of the object

		@param nNewState
			specifies the new state of the object

		@throws ::com::sun::star::embed::WrongStateException
			the state change is unexpected by listener
	 */
	void changingState( [in] com::sun::star::lang::EventObject aEvent,
						[in] long nOldState,
						[in] long nNewState )
		raises( ::com::sun::star::embed::WrongStateException );

	//------------------------------------------------------------------------
	/** is called after the object has changed state.

		@param aEvent
			specifies the object that has changed own state

		@param nOldState
			specifies the old state of the object

		@param nNewState
			specifies the new state of the object
	 */
	void stateChanged( [in] com::sun::star::lang::EventObject aEvent,
						[in] long nOldState,
						[in] long nNewState );
}; 
 
//============================================================================
 
}; }; }; };  
 
#endif

