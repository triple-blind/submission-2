/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_configuration_XTemplateContainer_idl__ 
#define __com_sun_star_configuration_XTemplateContainer_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module configuration {  
 
//============================================================================= 
 
/** is implemented by objects that contain instances of a named template to
	provide information about the template.

	<p> An implementation will also implement 
		<type scope="com::sun::star::lang">XSingleServiceFactory</type>, in which case
		that interface creates instances of the specified template.
	</p>
	<p> If multiple templates are supported, the supported factory interface may be  
		<type scope="com::sun::star::lang">XMultiServiceFactory</type>, in which case
		the <atom>string</atom> returned from 
		<member>XTemplateContainer::getElementTemplateName()</member> can be used as 
		the service name argument.
	</p>

	@see XTemplateInstance
 */
published interface XTemplateContainer: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	/** retrieves the name of the template
	
		<p>	If instances of multiple templates are accepted by the container, 
			this is the name of the basic or primary template.
		</p>
		<p>	Instances of the template must be created 
			using an appropriate factory.
		</p>

		@returns  
				the name of the (default) template for elements. 
	 */
	string getElementTemplateName(); 

}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
