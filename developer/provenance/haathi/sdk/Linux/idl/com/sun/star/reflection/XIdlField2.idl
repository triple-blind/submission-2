/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_reflection_XIdlField2_idl__ 
#define __com_sun_star_reflection_XIdlField2_idl__ 
 
#ifndef __com_sun_star_reflection_XIdlMember_idl__ 
#include <com/sun/star/reflection/XIdlMember.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_XIdlClass_idl__ 
#include <com/sun/star/reflection/XIdlClass.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_FieldAccessMode_idl__ 
#include <com/sun/star/reflection/FieldAccessMode.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalAccessException_idl__ 
#include <com/sun/star/lang/IllegalAccessException.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module reflection {  
 
//============================================================================= 
 
/** Reflects an IDL interface attribute, enum or compound type
    (i.e. struct/exception) member.
*/
published interface XIdlField2: com::sun::star::reflection::XIdlMember
{ 
	/** Returns the type of the field.

        @return
                type of the field
    */
	com::sun::star::reflection::XIdlClass getType(); 
    
	/** Returns the access mode of the field, i.e. read-write, read-only or
        write-only (access mode "const" is deprecated).
        
        @return
                access mode of the field
    */
	com::sun::star::reflection::FieldAccessMode getAccessMode(); 
    
	/** Gets the value of the reflected field from the given object,
        i.e. an interface, enum or compound type (struct/exception).
        For enums, the given object is ignored; the returned value
        reflects the constant enum 32-bit value.
        
        <p>When setting an interface attribute raises a
        non-<type scope="com::sun::star::uno">RuntimeException</type>, it is
        wrapped in a <type
        scope="com::sun::star::lang">WrappedTargetRuntimeException</type>.</p>
        
        @param obj
               object instance having member of reflected type
        @return
                value of field
                
        @throws IllegalAccessException
        An <type scope="com::sun::star::lang">IllegalAccessException</type>
        is thrown if the given object is no interface, enum or compound type;
        or the given object does not have the reflected field.
    */
	any get(
        [in] any obj ) 
        raises( com::sun::star::lang::IllegalArgumentException ); 
    
	/** Sets the value of the reflected field of the given object,
        i.e. an interface or compound type (struct/exception).

        <p>When setting an interface attribute raises a
        non-<type scope="com::sun::star::uno">RuntimeException</type>, it is
        wrapped in a <type
        scope="com::sun::star::lang">WrappedTargetRuntimeException</type>.</p>
        
        @param obj
               object instance having member of reflected type
        @param value
               value to be set
               
        @throws IllegalAccessException
        An <type scope="com::sun::star::lang">IllegalAccessException</type>
        is thrown if the given object is no interface or compound type;
        or the given object does not have the reflected field.
    */
	void set(
        [inout] any obj, 
        [in] any value ) 
        raises( com::sun::star::lang::IllegalArgumentException, 
                com::sun::star::lang::IllegalAccessException );
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
