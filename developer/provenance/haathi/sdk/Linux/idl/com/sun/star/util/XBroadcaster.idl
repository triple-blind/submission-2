/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_util_XBroadcaster_idl__ 
#define __com_sun_star_util_XBroadcaster_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
//============================================================================= 
 
module com {  module sun {  module star {  module util {  
 
//============================================================================= 
 
/** allows to control notification behaviour of a broadcaster.
	
	@since OOo 3.0
 */
interface XBroadcaster: com::sun::star::uno::XInterface
{ 
	/** suspends broadcasts to the registered listeners.

        <p>
        The calls to <member>XBroadcaster::lockBroadcast()</member> and
        <member>XBroadcaster::unlockBroadcasts()</member> may be
		nested and even overlapping, but they must be in pairs. While
		there is at least one lock remaining, no broadcasts are
		sent to registered listeners.
        </p>
     */
	[oneway] void lockBroadcasts();

	//-------------------------------------------------------------------------
	/** resumes the broadcasts which were suspended by
        <member>XBroadcaster::lockBroadcasts()</member>.

        <p>
        The calls to <member>XBroadcaster::lockBroadcast()</member> and
        <member>XBroadcaster::unlockBroadcasts()</member> may be
		nested and even overlapping, but they must be in pairs. While
		there is at least one lock remaining, no broadcasts are
		sent to registered listeners.
        </p>

		<p> Pending broadcasts will be sent immediately after the last
		call to <member>XBroadcaster::lockBroadcast()</member> is matched
        by a call to <member>XBroadcaster::unlockBroadcasts()</member>.
		An implementation can decide to broadcast all pending notification in
		order or batch them in single broadcasts.
		</p>
	*/
	[oneway] void unlockBroadcasts();
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
