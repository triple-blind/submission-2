/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_lang_XConnectionPointContainer_idl__ 
#define __com_sun_star_lang_XConnectionPointContainer_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 

//============================================================================= 
 
module com {  module sun {  module star {  module lang {  
 
 published interface XConnectionPoint; 
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::lang::XConnectionPointContainer
/** makes it possible to locate a specific connection point
	for a specified UIK and manages a sequence of connections points.
	
	<p>An implementation of this interface <strong>must</strong>
	support the <type scope="com::sun::star::uno">XWeak</type> interface. 
	Look at the language binding for a superclass or something else.  </p>

	@see XConnectionPoint 
	@see com::sun::star::uno::XWeak
 */
published interface XConnectionPointContainer: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from idl: method com::sun::star::lang::XConnectionPointContainer::getConnectionPointTypes
	/** @returns 
			a sequence of all outgoing types; specifies which are supported 
			by this connectable object.
	 */
	sequence<type> getConnectionPointTypes(); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from idl: method com::sun::star::lang::XConnectionPointContainer::queryConnectionPoint
	/** @returns  
			an <type>XConnectionPoint</type> interface of a 
			connection point for a specified type if that type 
			describes a supported outgoing interface. It is 
			<const>NULL</const> on failure of the call. 
				 
		@param aType 
			specifies the connection point's type.
	 */
	XConnectionPoint queryConnectionPoint( [in] type aType ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::lang::XConnectionPointContainer::advise
	/** creates a connection between this object and a
		client's sink, where the sink implements the outgoing
		interface specified with ID.
		
		<p>The interface is advised under the connection point you
		get with <code>queryConnectionPoint( id )</code>.  </p>

		<p>Use this method instead of the advise method at the
		connection point, only if you know that the broadcaster supports
		the outgoing interface, or if it does not matter that the
		outgoing interface is not supported.  </p>

		@see XConnectionPoint::advise
	 */
	[oneway] void advise( [in] type aType, 
			 [in] com::sun::star::uno::XInterface xListener ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::lang::XConnectionPointContainer::unadvise
	/** terminates a notification previously set up with
		advise at the container or at the suitable connection point.

		@see XConnectionPoint::unadvise
	 */
	[oneway] void unadvise( [in] type aType, 
			 [in] com::sun::star::uno::XInterface xListener ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
