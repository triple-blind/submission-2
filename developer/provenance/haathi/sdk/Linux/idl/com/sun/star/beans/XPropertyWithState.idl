/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_beans_XPropertyWithState_idl__ 
#define __com_sun_star_beans_XPropertyWithState_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_beans_PropertyState_idl__ 
#include <com/sun/star/beans/PropertyState.idl> 
#endif 
 
#ifndef __com_sun_star_lang_WrappedTargetException_idl__ 
#include <com/sun/star/lang/WrappedTargetException.idl> 
#endif 
 
//============================================================================= 
 
module com {  module sun {  module star {  module beans {  
 
//============================================================================= 
 
/** makes it possible to query information about the state of 
	this object, seen as a property contained in a property set.
	
	<p> This interface provides direct access to operations 
		that are available if the containing property set 
		implements <type>XPropertyState</type>.
	</p>
		 
	<p>The state contains the information if:</p>
	<ul>
		<li>a value is available or void</li> 
		<li>the value is stored in the object itself, or if a default value is being used</li>
		<li>or if the value cannot be determined, due to ambiguity
			(multi selection with multiple values).</li>
	</ul>

	<p>	Generally objects that implement this interface
		also implement <type>XProperty</type>.
	</p>
 */
published interface XPropertyWithState: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	/** @returns  
				the state of this as a property. 
	 */
	com::sun::star::beans::PropertyState getStateAsProperty( ); 
 
	//------------------------------------------------------------------------- 
	 
	/** sets this to its default value. 
		
		<p>	The value depends on the implementation of this interface. 
			If this is a bound property, the value changes before 
			the change events are fired.  If this is a constrained property, 
			the vetoable event is fired before the property value changes.
		</p>
		
			@throws  com::sun::star::lang::WrappedTargetException  
				if the implementation has an internal reason for the exception. 
				In this case the original exception is wrapped into that 
				<type scope="com::sun::star::lang">WrappedTargetException</type>.
	 */
	void setToDefaultAsProperty( ) 
			raises( com::sun::star::lang::WrappedTargetException ); 

	//------------------------------------------------------------------------- 
	 
	/**		@returns 
				an object representing the default state of this object (as a property).  
				 
			<p>	If no default exists, is not known or is void, 
				then the return value is <NULL/>. 
			</p>

			@throws  com::sun::star::lang::WrappedTargetException  
				if the implementation has an internal reason for the exception. 
				In this case the original exception is wrapped into that 
				<type scope="com::sun::star::lang">WrappedTargetException</type>.
	 */
	com::sun::star::uno::XInterface getDefaultAsProperty( ) 
			raises( com::sun::star::lang::WrappedTargetException ); 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
