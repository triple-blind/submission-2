/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_uno_XComponentContext_idl__ 
#define __com_sun_star_uno_XComponentContext_idl__ 
 
#ifndef __com_sun_star_uno_Exception_idl__ 
#include <com/sun/star/uno/Exception.idl> 
#endif 


module com {  module sun {  module star {  module lang {
 published interface XMultiComponentFactory;
}; }; }; };

module com {  module sun {  module star {  module uno {

/** Component context to be passed to a component via
    <type scope="com::sun::star::lang">XSingleComponentFactory</type>.
	Arbitrary values (e.g. deployment values) can be retrieved from the context.
*/
published interface XComponentContext : XInterface
{
    /** Gets a value from the context.
        
        @param Name
               name of value
        @return
                value
    */
    any getValueByName( [in] string Name );
    
    /** Gets the service manager instance to be used from key
        <code>/singletons/com.sun.star.lang.theServiceManager</code> (maybe null ref).
        This method has been added for convenience, because the
        service manager is used very often.
        
        @return
                service manager, if any
    */
    com::sun::star::lang::XMultiComponentFactory getServiceManager();
};

}; }; }; };
 
#endif
