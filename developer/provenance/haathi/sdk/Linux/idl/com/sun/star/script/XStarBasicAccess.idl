/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_script_XStarBasicAccess_idl__ 
#define __com_sun_star_script_XStarBasicAccess_idl__ 
 
#ifndef __com_sun_star_container_XNameContainer_idl__ 
#include <com/sun/star/container/XNameContainer.idl> 
#endif 
  
//============================================================================= 
 
 module com {  module sun {  module star {  module script {  
 
//============================================================================= 
 
/** Interface representing a library and provides access to its modules

	@deprecated
 */
published interface XStarBasicAccess: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	/** returns  
		the library container giving access to the libraries stored in a document
		or basic library file.
	 */
	com::sun::star::container::XNameContainer getLibraryContainer(); 
 
	//------------------------------------------------------------------------- 
	/**
		Creates an empty library. This method can be called alternatively to
		accessing directly the NameContainer returned by getLibraryContainer. 
		By using this method together with addModule and addStarBasicDialog
		the caller does not have to implement XStarBasicLibraryInfo, XModuleInfo, 
		and XStarBasicDialogInfo
	 */
	void createLibrary( [in] string LibName, [in] string Password, 
						[in] string ExternalSourceURL, [in] string LinkTargetURL )
		raises( com::sun::star::container::ElementExistException ); 

	//------------------------------------------------------------------------- 
	/**
		Adds a module to an existing (e.g., created by createLibrary) library.
		By using this method together with createLibrary the caller does not have 
		to implement XStarBasicLibraryInfo and XModuleInfo. 

		@throws  NoSuchElementException
		if the library doesn't exist. 
	 */
	void addModule( [in] string LibraryName, [in] string ModuleName, 
					[in] string Language, [in] string Source )
		raises( com::sun::star::container::NoSuchElementException ); 
 
	//------------------------------------------------------------------------- 
	/**
		Adds an old style basic dialog (SI controls) to an existing (e.g., created 
		by createLibrary) library.
		By using this method together with createLibrary the caller does not have 
		to implement XStarBasicLibraryInfo and XStarBasicDialogInfo

		@throws  NoSuchElementException
		if the library doesn't exist. 
	 */
	void addDialog( [in] string LibraryName, [in] string DialogName, 
					[in] sequence< byte > Data )
		raises( com::sun::star::container::NoSuchElementException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
