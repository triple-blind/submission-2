/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_script_XEngineListener_idl__ 
#define __com_sun_star_script_XEngineListener_idl__ 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
#ifndef __com_sun_star_script_InterruptEngineEvent_idl__ 
#include <com/sun/star/script/InterruptEngineEvent.idl> 
#endif 
 
#ifndef __com_sun_star_lang_EventObject_idl__ 
#include <com/sun/star/lang/EventObject.idl> 
#endif 
 
#ifndef __com_sun_star_script_FinishEngineEvent_idl__ 
#include <com/sun/star/script/FinishEngineEvent.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module script {  
 
//============================================================================= 
/** makes it possible to receive events from a scripting engine.
	@deprecated
 */
published interface XEngineListener: com::sun::star::lang::XEventListener
{ 
	//------------------------------------------------------------------------- 
	/** gets fired when an interrupt occurs during the script execution.
		
		<p>If you call the method, the execution stops.  So in this situation, 
		the stack and variable values are still available by using the 
		appropriate <type>XDebugging</type>	methods.
		</p>
	 */
	void interrupt( [in] com::sun::star::script::InterruptEngineEvent Evt ); 
 
	//------------------------------------------------------------------------- 
	/** gets fired when the script gets into execution state.
	 */
	void running( [in] com::sun::star::lang::EventObject Evt ); 
 
	//------------------------------------------------------------------------- 
	/** gets fired when the script execution has finished.
	 */
	void finished( [in] com::sun::star::script::FinishEngineEvent Evt ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
