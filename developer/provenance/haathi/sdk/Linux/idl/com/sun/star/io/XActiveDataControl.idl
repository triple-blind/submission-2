/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_io_XActiveDataControl_idl__ 
#define __com_sun_star_io_XActiveDataControl_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_io_XStreamListener_idl__ 
#include <com/sun/star/io/XStreamListener.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XActiveDataControl
/** makes it possible to control an active data source.
	
	<p>This interface should be supported by objects which implement
	<type>XActiveDataSource</type> or <type>XActiveDataSink</type>.</p>
 */
published interface XActiveDataControl: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XActiveDataControl::addListener
	/** registers an object to receive events from this data source.
       <p>It is suggested to allow multiple registration of the same listener,
	    thus for each time a listener is added, it has to be removed.
	 */
	void addListener( [in] com::sun::star::io::XStreamListener aListener ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XActiveDataControl::removeListener
	/** unregisters an object to receive events from this data source.

       <p>It is suggested to allow multiple registration of the same listener,
	    thus for each time a listener is added, it has to be removed.
	 */
	void removeListener( [in] com::sun::star::io::XStreamListener aListener ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XActiveDataControl::start
	/** starts I/O.
		
		<p>Either <member>XActiveDataControl::setInputStream()</member> or
		<member>XActiveDataControl::setOutputStream()</member> must be called beforehand.
		</p>

		<p>This method does not block the thread, so reading is
		generally not finished when the method returns. </p>
	 */
	void start(); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XActiveDataControl::terminate
	/** does a weak abort. 
		
		<p>It closes all connected resources and calls
		<member>XInputStream::close</member> or
		<member>XOutputStream::close</member> and fires the 
		<member>XStreamListener::terminated</member>-event.</p>
	 */
	void terminate(); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
