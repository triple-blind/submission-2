/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_lang_XMultiServiceFactory_idl__ 
#define __com_sun_star_lang_XMultiServiceFactory_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_uno_Exception_idl__ 
#include <com/sun/star/uno/Exception.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module lang {  
 
//============================================================================= 
 
/** Factories support this interface creating instances giving a name,
    e.g. a service name.
    
    <p>
    Note:
    Although this interface deals with the notion of "services", this is not
    generally be meant.  In general this interface can be used for all kinds
    of factories for all kinds of instances, indeed not only UNO services.
    </p>
*/
published interface XMultiServiceFactory: com::sun::star::uno::XInterface
{ 
	/** Creates an instance classified by the specified name.
        
        @param aServiceSpecifier
               classified name of instance
        @return
                instance
    */
	com::sun::star::uno::XInterface createInstance( [in] string aServiceSpecifier ) 
        raises( com::sun::star::uno::Exception ); 
    
	/** Creates an instance classified by the specified name and passes the arguments
        to that instance.
        
        @param ServiceSpecifier
               classified name of instance
        @param Arguments
               arguments passed to the instance
        @return
                instance
    */
	com::sun::star::uno::XInterface createInstanceWithArguments(
        [in] string ServiceSpecifier, 
        [in] sequence<any> Arguments ) 
        raises( com::sun::star::uno::Exception ); 
    
	/** Provides the available names of the factory to be used to create instances.
        
        @returns 
                 sequence of all names
    */
	sequence<string> getAvailableServiceNames();
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
