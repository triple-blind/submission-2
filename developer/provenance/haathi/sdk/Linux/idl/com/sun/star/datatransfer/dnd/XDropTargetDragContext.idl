/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_datatransfer_dnd_XDropTargetDragContext_idl__
#define __com_sun_star_datatransfer_dnd_XDropTargetDragContext_idl__

#ifndef __com_sun_star_datatransfer_dnd_InvalidDNDOperationException_idl__
#include <com/sun/star/datatransfer/dnd/InvalidDNDOperationException.idl>
#endif

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

//=============================================================================

module com { module sun { module star { module datatransfer { module dnd {

//=============================================================================
/** This interface is implemented by any drop target context object.

	<p>A drop target context is created whenever the logical cursor associated 
	with a Drag and Drop operation moves within the visible geometry of a 
	window associated with a drop target. </p>
	
	<p>The drop target context provides the mechanism for a potential receiver 
	of a drop operation to both provide the end user with the appropriate drag 
	under feedback and effect the subsequent data transfer, if appropriate. </p>
*/

published interface XDropTargetDragContext: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** Accept the Drag. 

		<p>This method should be called from the methods of <type>XDropTargetListener</type> 
		<ul>
			<li><member>XDropTargetListener::dragEnter()</member></li>
			<li><member>XDropTargetListener::dragOver()</member></li>
			<li><member>XDropTargetListener::dragActionChanged()</member></li>
		</ul>
		if the implementation wishes to accept the drag operation with the specified
		action.</p>

		@param dragOperation
		The operation accepted by the target.

		@see DNDConstants
		@see DropTargetDragEvent
	*/
	       
	[oneway] void acceptDrag( [in] byte dragOperation );

	//-------------------------------------------------------------------------
	/** Reject the drag as a result of examining the available 
		<type scope="com::sun::star::datatransfer">DataFlavor</type> types
		received in the <member scope="com::sun::star::datatransfer::dnd">XDropTargetListener::dragEnter()</member> method.
	*/

	[oneway] void rejectDrag();
};

//=============================================================================

}; }; }; }; };

#endif
