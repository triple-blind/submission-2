/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_bridge_oleautomation_Currency_idl__ 
#define __com_sun_star_bridge_oleautomation_Currency_idl__ 
 
 
module com {  module sun {  module star {  module bridge {  module oleautomation {
 
/** is the UNO representation of the Automation type <code>CY</code>, also know
    as <code>CURRENCY</code>.
    <p>
    A <code>CY</code> could actually be represented as <atom>hyper</atom> in UNO
    and therefore a typedef from <atom>hyper</atom> to a currency type would do.
    But a typedef cannot be expressed in all language bindings. In the case
    where no typedefs are supported the actual type is used. That is, a
    typedef'd currency type would be represented as <code>long</code> in Java.
    The information that the <code>long</code> is a currency type is lost. 
    </p>
    <p>
    When calling Automation objects from UNO the distinction between
    <atom>hyper</atom> and a currency type is important. Therefore
    <type>Currency</type> is declared as struct.
    </p>
    
    @since OOo 1.1.2
 */
struct Currency
{
    /** corresponds to the Automation type <code>CY</code>.
     */
    hyper Value;
}; 
 
}; }; }; }; }; 
 

#endif 
