/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_xml_XPath_XXPathAPI_idl__
#define __com_sun_star_xml_XPath_XXPathAPI_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_xml_dom_XNode_idl__
#include <com/sun/star/xml/dom/XNode.idl>
#endif
#ifndef __com_sun_star_xml_dom_XNodeList_idl__
#include <com/sun/star/xml/dom/XNodeList.idl>
#endif
#ifndef __com_sun_star_xml_xpath_XXPathObject_idl__
#include <com/sun/star/xml/xpath/XXPathObject.idl>
#endif
#ifndef __com_sun_star_xml_xpath_XXPathExtension_idl__
#include <com/sun/star/xml/xpath/XXPathExtension.idl>
#endif
#ifndef __com_sun_star_xml_XPath_XPathException_idl__
#include <com/sun/star/xml/xpath/XPathException.idl>
#endif


module com { module sun { module star { module xml { module xpath {


interface XXPathAPI : com::sun::star::uno::XInterface
{

    void registerNS(
            [in] string prefix,
            [in] string url);

    void unregisterNS(
            [in] string prefix,
            [in] string url);

    void registerExtension( [in] string serviceName );
    void registerExtensionInstance(
            [in] com::sun::star::xml::xpath::XXPathExtension aExtension);

    /** Eval XPath Expression.

        @param contextNode
            the context node (expression is relative to this node)

        @param expr
            the XPath expression

        @throws XPathException
            if the expression is malformed, or evaluation fails

        @returns
            an object representing the result of the XPath evaluation

        @see XXPathObject
     */
    XXPathObject eval(
            [in] com::sun::star::xml::dom::XNode contextNode,
            [in] string expr)
        raises( com::sun::star::xml::xpath::XPathException );

    /** Eval XPath Expression.

        @param contextNode
            the context node (expression is relative to this node)

        @param expr
            the XPath expression

        @param namespaceNode
            all namespaces declared on this node will be registered

        @throws XPathException
            if the expression is malformed, or evaluation fails

        @returns
            an object representing the result of the XPath evaluation

        @see XXPathObject
     */
    XXPathObject evalNS(
            [in] com::sun::star::xml::dom::XNode contextNode,
            [in] string expr,
            [in] com::sun::star::xml::dom::XNode namespaceNode)
        raises( com::sun::star::xml::xpath::XPathException );

    /** Evaluate an XPath expression to select a list of nodes.

        @param contextNode
            the context node (expression is relative to this node)

        @param expr
            the XPath expression

        @throws XPathException
            if the expression is malformed, or evaluation fails

        @returns
            result of the XPath evaluation: a list of nodes

        @see XNodeList
     */
    com::sun::star::xml::dom::XNodeList selectNodeList(
            [in] com::sun::star::xml::dom::XNode contextNode,
            [in] string expr)
        raises( com::sun::star::xml::xpath::XPathException );

    /** Evaluate an XPath expression to select a list of nodes.

        @param contextNode
            the context node (expression is relative to this node)

        @param expr
            the XPath expression

        @param namespaceNode
            all namespaces declared on this node will be registered

        @throws XPathException
            if the expression is malformed, or evaluation fails

        @returns
            result of the XPath evaluation: a list of nodes

        @see XNodeList
     */
    com::sun::star::xml::dom::XNodeList selectNodeListNS(
            [in] com::sun::star::xml::dom::XNode contextNode,
            [in] string str,
            [in] com::sun::star::xml::dom::XNode namespaceNode)
        raises( com::sun::star::xml::xpath::XPathException );

    /** Evaluate an XPath expression to select a single node.

        @param contextNode
            the context node (expression is relative to this node)

        @param expr
            the XPath expression

        @throws XPathException
            if the expression is malformed, or evaluation fails

        @returns
            result of the XPath evaluation: a single node
    */
    com::sun::star::xml::dom::XNode selectSingleNode(
            [in] com::sun::star::xml::dom::XNode contextNode,
            [in] string expr)
        raises( com::sun::star::xml::xpath::XPathException );

    /** Evaluate an XPath expression to select a single node.

        @param contextNode
            the context node (expression is relative to this node)

        @param expr
            the XPath expression

        @param namespaceNode
            all namespaces declared on this node will be registered

        @throws XPathException
            if the expression is malformed, or evaluation fails

        @returns
            result of the XPath evaluation: a single node
    */
    com::sun::star::xml::dom::XNode selectSingleNodeNS(
            [in] com::sun::star::xml::dom::XNode contextNode,
            [in] string str,
            [in] com::sun::star::xml::dom::XNode namespaceNode)
        raises( com::sun::star::xml::xpath::XPathException );

};

}; }; }; }; };

#endif
