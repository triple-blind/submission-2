/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__
#define __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__

#ifndef __com_sun_star_task_XInteractionContinuation_idl__
#include <com/sun/star/task/XInteractionContinuation.idl>
#endif

#ifndef __com_sun_star_ucb_RememberAuthentication_idl__
#include <com/sun/star/ucb/RememberAuthentication.idl>
#endif


//=============================================================================

module com { module sun { module star { module ucb { 

//=============================================================================
/** An interaction continuation handing back some authentication data.
	
	<p> This continuation is typically used in conjunction with
	<type>AuthenticationRequest</type>. </p>
*/
published interface XInteractionSupplyAuthentication: com::sun::star::task::XInteractionContinuation
{
	//-------------------------------------------------------------------------
	/** Specifies if a new 'realm' value can be handed back.
	*/
	boolean canSetRealm();

	//-------------------------------------------------------------------------
	/** Set a new 'realm' value to hand back.
		
		<p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetRealm</member> returned
        <true/>.</p>
	*/
	void setRealm( [in] string Realm );

	//-------------------------------------------------------------------------
	/** Specifies if a 'user name' value can be handed back.
	*/
	boolean canSetUserName();

	//-------------------------------------------------------------------------
	/** Set a new 'user name' value to hand back.

		<p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetUserName</member> 
        returned <true/>.</p>
	*/
	void setUserName( [in] string UserName );

	//-------------------------------------------------------------------------
	/** Specifies if a 'password' value can be handed back.
	*/
	boolean canSetPassword();

	//-------------------------------------------------------------------------
	/** Set a new 'password' value to hand back.
		
		<p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetPassword</member> 
        returned <true/>.</p>
	*/
	void setPassword( [in] string Password );

	//-------------------------------------------------------------------------
	/** Specifies the available modes of how long to remember the password.

		@param Default
		Returns the default mode (to be initially displayed to the user).

		@returns
		A sequence of available modes to hand back.  Each individual mode
		should appear at most once in the sequence.  If the sequence is	empty,
		a new mode cannot be handed back.
	*/
	sequence<com::sun::star::ucb::RememberAuthentication> getRememberPasswordModes( [out] com::sun::star::ucb::RememberAuthentication Default );

	//-------------------------------------------------------------------------
	/** Set a new mode of how long to remember the password.

		<p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::setPassword</member> 
        is also called.</p>
		
		@param Remember  
        The mode to hand back, should be contained in the sequence returned by
        <member>XInteractionSupplyAuthentication::getRememberPasswordModes</member>.
	*/
	void setRememberPassword( [in] com::sun::star::ucb::RememberAuthentication Remember );

	//-------------------------------------------------------------------------
	/** Specifies if an 'account' value can be handed back.
	*/
	boolean canSetAccount();

	//-------------------------------------------------------------------------
	/** Set a new 'account' value to hand back.
		
		<p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetAccount</member> 
        returned <true/>.</p>

	*/
	void setAccount( [in] string Account );

	//-------------------------------------------------------------------------
	/** Specifies the available modes of how long to remember the account.

		@param Default  Returns the default mode (to be initially displayed to
		the user).

		@returns  A sequence of available modes to hand back.  Each individual
		mode should appear at most once in the sequence.  If the sequence is
		empty, a new mode cannot be handed back.
	 */
	sequence<com::sun::star::ucb::RememberAuthentication> getRememberAccountModes( [out] com::sun::star::ucb::RememberAuthentication Default );

	//-------------------------------------------------------------------------
	/** Set a new mode of how long to remember the account.
		
		<p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::setAccount</member> 
        is also called.</p>
		
		@param Remember  The mode to hand back, should be contained in the
		sequence returned by 
        <member>XInteractionSupplyAuthentication::getRememberAccountModes</member>.
	*/
	void setRememberAccount( [in] com::sun::star::ucb::RememberAuthentication Remember );

};

//=============================================================================

}; }; }; }; 

#endif
