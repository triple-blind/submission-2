/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_embed_XVisualObject_idl__
#define __com_sun_star_embed_XVisualObject_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_awt_Size_idl__
#include <com/sun/star/awt/Size.idl>
#endif

#ifndef __com_sun_star_embed_VisualRepresentation_idl__
#include <com/sun/star/embed/VisualRepresentation.idl>
#endif

#ifndef __com_sun_star_embed_WrongStateException_idl__
#include <com/sun/star/embed/WrongStateException.idl>
#endif

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module embed {

//=============================================================================
/** represents common visualisation functionality for embedded objects.
 */
published interface XVisualObject: ::com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
    /** sets the size of object's visual area.

		<p>
		The size must be provided in logical units according to map mode the
		object communicates in.
		</p>

		<p>
		If an object is inplace- or ui-active the method must not initiate
		repainting itself.
		</p>

		@param nAspect
			the aspect specifying the form of object representation.
			Can take values from <type>Aspects</type> constant set.

		@param aSize
			the new size of the visual area

		@throws ::com::sun::star::lang::IllegalArgumentException
			one of arguments is illegal

        @throws ::com::sun::star::embed::WrongStateException
		    the object is in wrong state

        @throws ::com::sun::star::uno::Exception
			the object failed to resize
	 */
	void setVisualAreaSize( [in] hyper nAspect,
						 [in] ::com::sun::star::awt::Size aSize )
		raises( ::com::sun::star::lang::IllegalArgumentException,
				::com::sun::star::embed::WrongStateException,
				::com::sun::star::uno::Exception );

	//-------------------------------------------------------------------------
    /** gets the size of object's visual area.

		<p>
		The size must be provided in logical units according to map mode the
		object communicates in.
		</p>

		@param nAspect
			the aspect specifying the form of object representation.
			Can take values from <type>Aspects</type> constant set.

		@return
			the size of visual area

		@throws ::com::sun::star::lang::IllegalArgumentException
			one of arguments is illegal

        @throws ::com::sun::star::embed::WrongStateException
		    the object is in wrong state
	 */
	::com::sun::star::awt::Size getVisualAreaSize( [in] hyper nAspect )
		raises( ::com::sun::star::lang::IllegalArgumentException,
				::com::sun::star::embed::WrongStateException,
				::com::sun::star::uno::Exception );

	//------------------------------------------------------------------------
    /** retrieves visual representation of the object in preferable format.

		<p>
		If the object persistance entry contains cached visual representation
		then it can be retrieved by using this method even in loaded state.
		</p>

		@param nAspect
			the aspect the representation is requested for.
			Can take values from <type>Aspects</type> constant set.

		@return
			the visual representation of the object in the default format and
			the format

		@throws ::com::sun::star::lang::IllegalArgumentException
			one of arguments is illegal

        @throws ::com::sun::star::embed::WrongStateException
		    the object is in wrong state

        @throws ::com::sun::star::uno::Exception
			in case of problems

	 */
	VisualRepresentation getPreferredVisualRepresentation( [in] hyper nAspect )
		raises( ::com::sun::star::lang::IllegalArgumentException,
				::com::sun::star::embed::WrongStateException,
				::com::sun::star::uno::Exception );


	//-------------------------------------------------------------------------
    /** retrieves map mode the object communicates in.

		@param nAspect
			the aspect the map mode is requested for.
			Can take values from <type>Aspects</type> constant set.

		@return
			the map mode the object communicates in, it can take values from
            <type>EmbedMapUnits</type> constant

        @throws ::com::sun::star::embed::WrongStateException
		    the object is in wrong state

        @throws ::com::sun::star::uno::Exception
			in case of problems
	 */
    long getMapUnit( [in] hyper nAspect )
		raises( ::com::sun::star::uno::Exception );
};

//=============================================================================

}; }; }; };

#endif

