/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_frame_XController_idl__
#define __com_sun_star_frame_XController_idl__

#ifndef __com_sun_star_lang_XComponent_idl__
#include <com/sun/star/lang/XComponent.idl>
#endif

//=============================================================================

 module com {  module sun {  module star {  module frame {

 published interface XFrame;
 published interface XModel;

//=============================================================================
/** With this interface, components viewed in a <type>Frame</type> can serve
    events (by supplying dispatches).

    @see XFrame
    @see com::sun::star::awt::XWindow
    @see XModel
 */
published interface XController: com::sun::star::lang::XComponent
{
	//-------------------------------------------------------------------------
	/** is called to attach the controller with its managing frame.

        @param Frame
            the new owner frame of this controller
	 */
    void attachFrame( [in] XFrame Frame );

	//-------------------------------------------------------------------------
	/** is called to attach the controller to a new model.

        @param Model
            the new model for this controller

        @return
            <TRUE/>if attach was successfully
            <br>
            <FALSE/>otherwise
	 */
    boolean attachModel( [in] XModel Model );

	//-------------------------------------------------------------------------
	/** is called to prepare the controller for closing the view

        @param Suspend
            <TRUE/>force the controller to suspend his work
            <FALSE/>try to reactivate the controller

        @return
            <TRUE/>if request was accepted and of course successfully finished
            <br>
            <FALSE/>otherwise
	 */
    boolean suspend( [in] boolean Suspend );

	//-------------------------------------------------------------------------
    /** provides access to current view status

        @returns
            set of data that can be used to restore the current view status
            at later time by using <member>XController::restoreViewData()</member>
	 */
	any getViewData();

	//-------------------------------------------------------------------------
	/** restores the view status using the data gotten from a previous call to
        <member>XController::getViewData()</member>.

        @param Data
            set of data to restore it
	 */
    void restoreViewData( [in] any Data );

	//-------------------------------------------------------------------------
    /** provides access to currently attached model

        @returns
            the currently attached model.
	 */
	XModel getModel();

	//-------------------------------------------------------------------------
    /** provides access to owner frame of this controller

        @returns
            the frame containing this controller.
	 */
	XFrame getFrame();
};

//=============================================================================

}; }; }; };

#endif
