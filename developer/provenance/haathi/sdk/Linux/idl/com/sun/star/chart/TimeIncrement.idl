/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef com_sun_star_chart_TimeIncrement_idl
#define com_sun_star_chart_TimeIncrement_idl

#include <com/sun/star/chart/TimeInterval.idl>

//=============================================================================

module com {  module sun {  module star {  module chart {

//=============================================================================

/** A TimeIncrement describes how tickmarks are positioned on the scale of a date-time axis.
@since OOo 3.4
*/
published struct TimeIncrement
{
    /** if the any contains a struct of type <type>::com::sun::star::chart::TimeInterval</type> 
        this is used as a fixed distance value for the major tickmarks.  Otherwise, if the any is empty or contains an
        incompatible type, the distance between major tickmarks is calculated automatically by the application.
     */
    any     MajorTimeInterval;

    /** if the any contains a struct of type <type>::com::sun::star::chart::TimeInterval</type> 
        this is used as a fixed distance value for the minor tickmarks.  Otherwise, if the any is empty or contains an
        incompatible type, the distance between minor tickmarks is calculated automatically by the application.
     */
    any     MinorTimeInterval;

    /** if the any contains a constant of type <type>::com::sun::star::chart::TimeUnit</type> 
        this is the smallest time unit that is displayed on the date-time axis.
        Otherwise, if the any is empty or contains an incompatible type,
        the resolution is choosen automatically by the application.
     */
    any     TimeResolution;
};

//=============================================================================

}; }; }; };

#endif
