/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_lang_XMultiComponentFactory_idl__ 
#define __com_sun_star_lang_XMultiComponentFactory_idl__ 
 
#ifndef __com_sun_star_uno_XComponentContext_idl__
#include <com/sun/star/uno/XComponentContext.idl> 
#endif 


//=============================================================================

module com {  module sun {  module star {  module lang {

/** Factory interface for creating component instances giving a context from 
	which to retrieve deployment values.
    
	@see XInitialization 
*/
published interface XMultiComponentFactory : com::sun::star::uno::XInterface
{ 
	/** Creates an instance of a component which supports the
		services specified by the factory.
        
        @param aServiceSpecifier
               service name
        @param Context
               context the component instance gets its deployment values from
        @return
                component instance
    */
	com::sun::star::uno::XInterface createInstanceWithContext(
        [in] string aServiceSpecifier,
        [in] com::sun::star::uno::XComponentContext Context )
        raises (com::sun::star::uno::Exception);
    
	/** Creates an instance of a component which supports the
		services specified by the factory, and initializes the new instance
        with the given arguments and context.
        
        @param ServiceSpecifier
               service name
        @param Arguments
               arguments
        @param Context
               context the component instance gets its deployment values from
        @return
                component instance
    */
	com::sun::star::uno::XInterface createInstanceWithArgumentsAndContext(
        [in] string ServiceSpecifier, 
        [in] sequence<any> Arguments,
        [in] com::sun::star::uno::XComponentContext Context )
        raises (com::sun::star::uno::Exception);
    
	/** Gets the names of all supported services.
        
        @returns 
                 sequence of all service names
    */
	sequence< string > getAvailableServiceNames();
}; 
 
}; }; }; };  
 
#endif 
