/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_task_XMasterPasswordHandling_idl__
#define __com_sun_star_task_XMasterPasswordHandling_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_task_XInteractionHandler_idl__
#include <com/sun/star/task/XInteractionHandler.idl>
#endif


//=============================================================================

module com { module sun { module star { module task {

//=============================================================================
/** allows to change the master password, or let it be requested and checked.
*/
published interface XMasterPasswordHandling : com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** allows to check the user authorization.

        <p>
        This call let the master password be requested from user using the
        provided interaction handler.
        </p>

        <p>
        The call will use the standard interactin handler service
        <type>InteractionHandler</type> if no handler is provided.
        </p>

	*/
	boolean authorizateWithMasterPassword( [in] XInteractionHandler xHandler );

	//-------------------------------------------------------------------------
	/** allows to change the master password.

        <p>
        If there is still no master password, the user will be asked to provide
        the new one.
        </p>

        <p>
        The call will use the standard interaction handler service
        <type>InteractionHandler</type> if no handler is provided.
        </p>
	*/
	boolean changeMasterPassword( [in] XInteractionHandler xHandler );

	//-------------------------------------------------------------------------
	/** let the master password and all the related stored passwords be
        removed.
	*/
	void removeMasterPassword();

	//-------------------------------------------------------------------------
	/** allows to detect whether there is already a master password
	*/
	boolean hasMasterPassword();

	//-------------------------------------------------------------------------
	/** allows to specify whether persistent storing of passwords is allowed

        <p>
        After the storing is forbidden the master password and all the stored
        passwords are removed.
        </p>
	*/
	boolean allowPersistentStoring( [in] boolean bAllow );

	//-------------------------------------------------------------------------
	/** allows to detect whether persistent storing of passwords is allowed
	*/
	boolean isPersistentStoringAllowed();

};

//=============================================================================

}; }; }; };

#endif

