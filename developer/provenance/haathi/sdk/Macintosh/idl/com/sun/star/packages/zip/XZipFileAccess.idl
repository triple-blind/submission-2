/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_packages_zip_XZipFileAccess_idl__
#define __com_sun_star_packages_zip_XZipFileAccess_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_packages_zip_ZipEntry_idl__ 
#include <com/sun/star/packages/zip/ZipEntry.idl> 
#endif 

#ifndef __com_sun_star_container_NoSuchElementException_idl_
#include <com/sun/star/container/NoSuchElementException.idl> 
#endif 

#ifndef __com_sun_star_io_IOException_idl__ 
#include <com/sun/star/io/IOException.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {   module packages {  module zip {
 
//============================================================================= 
 
/** allows to get reading access to nonencrypted entries inside zip file.
 */
interface XZipFileAccess: ::com::sun::star::uno::XInterface
{ 
	//-------------------------------------------------------------------------
	/** allows to get stream by specifying a pattern.

		<p>
		The first stream with a name that fits to the pattern will be returned.
		The pattern allows to use '*' wildcard symbol. If the name contains '*'
		or '\' symbols itself they must guarded with backslash '\'.
		The slashes have no special meaning here so they can be replaced
		by wildcards also.
		</p>
	 */
	::com::sun::star::io::XInputStream getStreamByPattern( [in] string aPattern )
		raises( ::com::sun::star::container::NoSuchElementException,
				::com::sun::star::io::IOException );

}; 
 
//============================================================================= 
 
}; }; }; }; };
 
#endif 

