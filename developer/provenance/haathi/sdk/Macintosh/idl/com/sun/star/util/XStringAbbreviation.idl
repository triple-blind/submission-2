/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_util_XStringAbbreviation_idl__
#define __com_sun_star_util_XStringAbbreviation_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

module com { module sun { module star { module util {
     published interface XStringWidth;
}; }; }; };

module com { module sun { module star { module util {

//============================================================================
/** Abbreviate arbitrary strings.

    <p>It is expected that there will be different implementations of this
    interface, that each expect strings conforming to a certain structure
    (e.g., URIs, platform-specific file paths, or newsgroup names).  The
    abbreviation algorithms will then take into account the structural
    information.</p>

    @see XStringWidth
 */
published interface XStringAbbreviation: com::sun::star::uno::XInterface
{
    //------------------------------------------------------------------------
    /** Abbreviate a string, so that the resulting abbreviated string is not
        wider than some given width.

        <p>The width of a string is an abstract concept here, measured via
        an <type>XStringWidth</type> interface.  Examples are the number of
        characters in the string (<type>XStringWidth</type> will measure the
        string's length), or the width in pixel when displayed with a specific
        font (which <type>XStringWidth</type> would encapsulate).</p>

        @param xStringWidth
        The interface that makes concrete the abstract notion of string width.

        @param nWidth
        The resulting abbreviated string's width will be no larger than this.

        @param aString
        The string that is abbreviated.

        @returns
        an abbreviated string.
     */
    string abbreviateString([in] XStringWidth xStringWidth,
                            [in] long nWidth,
                            [in] string aString);
};

}; }; }; };

#endif
