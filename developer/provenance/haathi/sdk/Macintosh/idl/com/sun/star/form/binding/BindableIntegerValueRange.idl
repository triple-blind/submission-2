/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_form_binding_BindableIntegerValueRange_idl__
#define __com_sun_star_form_binding_BindableIntegerValueRange_idl__

#ifndef __com_sun_star_form_binding_BindableControlModel_idl__
#include <com/sun/star/form/binding/BindableControlModel.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form {  module binding {

//=============================================================================

/** this service specifies a <type>BindableControlModel</type> which reflects
    an integer value, out of a range of permitted integer values.

    <p><type>BindableIntegerValueRange</type>s have a value property, a minimum, and a maximum,
    all of type integer.</p>
*/
service BindableIntegerValueRange
{
    /** specifies that the control can be bound to external values

        <p>Any binding used with the control model (see <member>XBindableValue::setValueBinding</member>)
        must support exchanging double values.</p>

        <p>When the (integer) value reflected by the control model is changed, it's converted
        into an double value and propagated to the binding.</p>

        <p>When the external (double) value changes, it's converted as follows to an integer
        value:
        <ul><li>If the external value is <NULL/>, the current value of the control model
                will be set to it's minimum.</li>
            <li>If the external value is the <em>infinite</em> value, the control value will
                be set to its maximum or minimum, depending on the sign of the external value.</li>
            <li>If none of the aforementioned conditions is met, the external value will be simply
                rounded.</li>
        </ul>
    */
    service com::sun::star::form::binding::BindableControlModel;

};

//=============================================================================

}; }; }; }; };

#endif
