/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_ucb_XDynamicResultSetListener_idl__
#define __com_sun_star_ucb_XDynamicResultSetListener_idl__

#ifndef __com_sun_star_lang_XEventListener_idl__
#include <com/sun/star/lang/XEventListener.idl>
#endif

#ifndef __com_sun_star_ucb_ListEvent_idl__
#include <com/sun/star/ucb/ListEvent.idl>
#endif

//=============================================================================

module com { module sun { module star { module ucb {

//=============================================================================
/**	used to receive notifications from an <type>XDynamicResultSet</type>.
*/

published interface XDynamicResultSetListener: com::sun::star::lang::XEventListener
{
	//-------------------------------------------------------------------------
	/** A method used to propagate changes of a resultset.

		<p>In the first notify-call the listener gets two(!)
		<type scope="com::sun::star::sdbc">XResultSet</type>s and has to hold
        them. The <type scope="com::sun::star::sdbc">XResultSet</type>s are
        implementations of the service <type>ContentResultSet</type>.

		<p>The notified new 
        <type scope="com::sun::star::sdbc">XResultSet</type> will stay valid
        after returning from this method. The old one will become invalid after
		returning.

		<p>While in notify-call the listener is allowed to read from old and
		new	resultset, except in the first call, where only the new resultset
		is valid.

		<p>The Listener is allowed to stay (block) this call, until he really
		wants to use the new resultset. The only situation, where the listener
		has to return immediately is while he disposes his broadcaster or while
		he is removing himself as listener (otherwise you deadlock)!!!

		@param  Changes
		the changes to notify.
	*/
	void notify( [in] ListEvent Changes );
};

//=============================================================================

}; }; }; };

#endif
