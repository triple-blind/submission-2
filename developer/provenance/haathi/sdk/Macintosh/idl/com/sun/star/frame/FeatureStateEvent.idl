/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_frame_FeatureStateEvent_idl__
#define __com_sun_star_frame_FeatureStateEvent_idl__

#ifndef __com_sun_star_lang_EventObject_idl__
#include <com/sun/star/lang/EventObject.idl>
#endif

#ifndef __com_sun_star_util_URL_idl__
#include <com/sun/star/util/URL.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** This event is broadcast by a <type>Controller</type> whenever the state of
    the feature changes

    @see XController
    @see XStatusListener
 */
published struct FeatureStateEvent: com::sun::star::lang::EventObject
{
	//-------------------------------------------------------------------------
	/** contains the URL of the feature.
	 */
	com::sun::star::util::URL FeatureURL;

	//-------------------------------------------------------------------------
	/** contains a descriptor of the feature for the user interface.
	 */
	string FeatureDescriptor;

	//-------------------------------------------------------------------------
	/** specifies whether the feature is currently enabled or disabled.
	 */
	boolean IsEnabled;

	//-------------------------------------------------------------------------
	/** specifies whether the <type>XDispatch</type> has to be requeried.

        <p>
        Interest code should listen for <type>FrameActionEvent</type>
        too, to update own feature states and dispatch listener on
        <const>FrameAction::CONTEXT_CHANGED</const>.
        </p>
	 */
	boolean Requery;

	//-------------------------------------------------------------------------
	/** contains the state of the feature in this dispatch.

        <p>
        This can be, for example, simply <TRUE/> for a boolean feature like
		underline on/off. Some simple types like <code>string</code> or
		<atom>boolean</atom> are useful here for generic UI elements, like
        a checkmark in a menu.
        </p>
	 */
	any State;
};

//=============================================================================

}; }; }; };

#endif
