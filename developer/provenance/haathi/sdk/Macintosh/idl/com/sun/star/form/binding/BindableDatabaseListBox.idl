/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_form_binding_BindableDatabaseListBox_idl__
#define __com_sun_star_form_binding_BindableDatabaseListBox_idl__

#ifndef __com_sun_star_form_component_DatabaseListBox_idl__
#include <com/sun/star/form/component/DatabaseListBox.idl>
#endif

#ifndef __com_sun_star_form_binding_BindableDataAwareControlModel_idl__
#include <com/sun/star/form/binding/BindableDataAwareControlModel.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form {  module binding {

//=============================================================================

/** This service specifies a list box model which is data-aware and thus can be bound to a
    database field, and additionally supports binding to arbitrary external values.

    <p>There are four possible ways how a <type>BindableDatabaseListBox</type> exchanges
    values with an external binding, the following lists explains all of them. If a new binding
    is set at a <type>BindableDatabaseListBox</type>, the types from the following list are
    tried in descending order: The first type supported by the binding is used for data exchange.
    <ol><li><em>sequences of integers</em>: When used, the integers in the sequence will represent
            the indexes of the selected entries of the list box.</li>
        <li><em>integer values</em>: When used, the value will represent the index of the selected entry.
            If no entry is selected, -1 will be transfered. If more than one entry is selected, <NULL/>
            will be transfered.</li>
        <li><em>sequences of strings</em>: When used, the strings in the sequence present the texts
            of the selected entries of the list box.</li>
        <li><em>string values</em>: When used. the value will represent the text of the selected entry.
            If no entry is selected, an empty string will be transfered. If more than one entry is selected,
            <NULL/> will be transfered.</li>
    </ol></p>

    @see com::sun::star::form::binding::XValueBinding::supportsType
 */
service BindableDatabaseListBox
{
	service com::sun::star::form::component::DatabaseListBox;

    /** specifies the interaction between an internal binding to a database column,
        and an external value binding.</p>
    */
    service com::sun::star::form::binding::BindableDataAwareControlModel;

};

//=============================================================================

}; }; }; }; };

#endif
