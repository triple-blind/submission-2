/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_frame_XFrameLoader_idl__
#define __com_sun_star_frame_XFrameLoader_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_frame_XFrame_idl__
#include <com/sun/star/frame/XFrame.idl>
#endif

#ifndef __com_sun_star_beans_PropertyValue_idl__
#include <com/sun/star/beans/PropertyValue.idl>
#endif

#ifndef __com_sun_star_frame_XLoadEventListener_idl__
#include <com/sun/star/frame/XLoadEventListener.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** load components into a frame

    <p>
    It's an asynchronous loading. For synchronous processes use <type>XSynchronousFrameLoader</type>
    instead of this one. The generic load algorithm of the office supports both ones - but prefered
    the synchronous interface.
    </p>

    @see XFrame
 */
published interface XFrameLoader: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** starts the loading of the specified resource into the specified <type>Frame</type>.

        @param Frame
            specifies the loading target

        @param URL
            describes the ressource of loading component
            Support of special protocols are implementation details
            and depends from the environment.

        @param Arguments
            optional arguments for loading
            (see <type scope="com::sun::star::document">MediaDescriptor</type> for further informations)

        @param Listener
            this listener will be informed about success

        @see XLoadEventListener
	 */
    [oneway] void load(
        [in] XFrame Frame,
        [in] string URL,
        [in] sequence< com::sun::star::beans::PropertyValue > Arguments,
        [in] XLoadEventListener Listener);

	//-------------------------------------------------------------------------
	/** cancels the loading process.

        <p>
        After returning from this call, neither the frame nor the
        load-event-listener specified in <member>XFrameLoader::load()</member> may be called back.
        Because only the owner of this process who called load method
        before can cancel this process. And he doesn't need any notification about that.
        On the other hand - nobody then this owner himself can be registered as an
        <type>XLoadEventListener</type> here.
        </p>
	 */
	[oneway] void cancel();
};

//=============================================================================

}; }; }; };

#endif
