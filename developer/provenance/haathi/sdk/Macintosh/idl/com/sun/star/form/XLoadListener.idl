/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_form_XLoadListener_idl__ 
#define __com_sun_star_form_XLoadListener_idl__ 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
#ifndef __com_sun_star_lang_EventObject_idl__ 
#include <com/sun/star/lang/EventObject.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module form { 
 
//============================================================================= 
 
/** receives load-related events from a loadable object.
	
	<p>The interface is typically implemented by data-bound components,
	which want to listen to the data source that contains their database
	form.</p>

	@see com::sun::star::form::XLoadable
	@see DataAwareControlModel
 */
published interface XLoadListener: com::sun::star::lang::XEventListener
{ 
	//------------------------------------------------------------------------- 
	 
	/** is invoked when the object has successfully connected to a datasource.

		@param aEvent
			the event happend.
	 */
	[oneway] void loaded( [in] com::sun::star::lang::EventObject aEvent ); 
 
	//------------------------------------------------------------------------- 
	 
	/** is invoked when the object is about to be unloaded.
		<p>Components may use this to stop any other event processing related to
		the event source before the object is unloaded.</p>

		@param aEvent
			the event happend.
	 */
	[oneway] void unloading( [in] com::sun::star::lang::EventObject aEvent ); 
 
	//------------------------------------------------------------------------- 
	 
	/** is invoked after the object has disconnected from a datasource.

		@param aEvent
			the event happend.
	 */
	[oneway] void unloaded( [in] com::sun::star::lang::EventObject aEvent ); 
 
	//------------------------------------------------------------------------- 
	 
	/** is invoked when the object is about to be reloaded.

		<p>Components may use this to stop any other event processing related
		to the event source until they get the reloaded event.</p>

		@param aEvent
			the event happend.
	 */
	[oneway] void reloading( [in] com::sun::star::lang::EventObject aEvent ); 
 
	//------------------------------------------------------------------------- 
	 
	/** is invoked when the object has been reloaded.

		@param aEvent
			the event happend.
	 */
	[oneway] void reloaded( [in] com::sun::star::lang::EventObject aEvent ); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
