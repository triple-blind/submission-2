/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_frame_XFrames_idl__
#define __com_sun_star_frame_XFrames_idl__

#ifndef __com_sun_star_container_XIndexAccess_idl__
#include <com/sun/star/container/XIndexAccess.idl>
#endif

#ifndef __com_sun_star_frame_XFrame_idl__
#include <com/sun/star/frame/XFrame.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** manages and creates frames.

    <p>
    Frames may contain other frames (by implementing an <type>XFrames</type>
	interface) and may be contained in other frames.
    </p>

    @see XFrame
    @see Frame
 */
published interface XFrames: com::sun::star::container::XIndexAccess
{
	//-------------------------------------------------------------------------
    /** appends the specified <type>Frame</type> to the list of sub-frames.

        @param xFrame
            new frame for inserting into this container
	 */
    void append( [in] XFrame xFrame );

	//-------------------------------------------------------------------------
    /** provides access to the list of all currently existing
        frames inside this container and her sub frames

        @param nSearchFlags
            use combinations of <type>FrameSearchFlag</type> to specify which
            frames should be found

        @return
            all frames of this container and all available frames of the whole frame tree
            which match search parameter <var>SearchFlags</var>
	 */
    sequence< XFrame > queryFrames( [in] long nSearchFlags );

	//-------------------------------------------------------------------------
	/** removes the frame from its container.

        <p>
        Note:
        <ul>
            <li>The method <method>XComponent::dispose()</method> is not called implicitly
                by this method.</li>
            <li>The creator attribute of the frame must be reset by the caller of
                this method.</li>
        </ul>
        </p>

        @param xFrame
            frame which should be removed from this container
	*/
    void remove( [in] XFrame xFrame );

};

//=============================================================================

}; }; }; };

#endif
