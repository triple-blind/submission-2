/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_sdbcx_Container_idl__ 
#define __com_sun_star_sdbcx_Container_idl__ 
 
 module com {  module sun {  module star {  module container { 
 published interface XNameAccess; 
 published interface XIndexAccess; 
 published interface XEnumerationAccess; 
};};};}; 
 
 module com {  module sun {  module star {  module util { 
 published interface XRefreshable; 
};};};}; 
 
 module com {  module sun {  module star {  module sdbcx { 
 
 published interface XDataDescriptorFactory; 
 published interface XAppend; 
 published interface XDrop; 
 
 
/** describes every container which is used for data definition. Each
	container must support access to its elements by the element's name or
	by the element's position.	
	
	<p>
	Simple enumeration must be supported as well.
	</p>
	<p>
	To reflect the changes with the underlying database, a refresh mechanism
	needs to be supported.
	</p>
	<p>
	A container may support the possibility to add new elements or to drop
	existing elements. Additions are always done by descriptors which define the
	properties of the new element.
	</p>
 */
published service Container
{ 
	// gives access to the elements by name.
	interface com::sun::star::container::XNameAccess; 
	
	// gives access to the elements by index.
	interface com::sun::star::container::XIndexAccess; 
	
	// used to create an enumeration of the elements.
	interface com::sun::star::container::XEnumerationAccess; 
 
	 
	/** is optional for implementation. Used to reflect changes. 
	 */
	[optional] interface com::sun::star::util::XRefreshable; 
	 
	/** optional for implementation. Allows to create descriptor elements which then could be used to append new elements.
	 */
	[optional] interface XDataDescriptorFactory; 
	 
	/** optional for implementation, provides the possibility of adding 
				a new element to the container.
	 */
	[optional] interface XAppend; 
	 
	/** optional for implementation, provides the possibility of dropping 
				an element from the container.
	 */
	[optional] interface XDrop; 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
