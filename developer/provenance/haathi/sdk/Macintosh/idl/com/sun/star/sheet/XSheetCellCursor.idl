/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_sheet_XSheetCellCursor_idl__
#define __com_sun_star_sheet_XSheetCellCursor_idl__

#ifndef __com_sun_star_sheet_XSheetCellRange_idl__
#include <com/sun/star/sheet/XSheetCellRange.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module sheet {

//=============================================================================

/** provides advanced methods to control the position of a cursor in a
	spreadsheet.

	@see com::sun::star::sheet::SheetCellCursor
 */
published interface XSheetCellCursor: com::sun::star::sheet::XSheetCellRange
{
	//-------------------------------------------------------------------------

	/** expands the cursor into the region containing the cells to which
		it currently points.

		<p>A region is a cell range bounded by empty cells.</p>
	 */
	void collapseToCurrentRegion();

	//-------------------------------------------------------------------------

	/** collapses the cursor into the range of the array formula to which
		it is currently pointing.

		<p>To get the correct result, the top left cell of the original
		cursor must point to any cell containing an array formula.
		If not, the cursor is left unchanged.</p>
	 */
	void collapseToCurrentArray();

	//-------------------------------------------------------------------------

	/** expands the cursor to merged cell ranges.

		<p>Expands the current cursor range in a way so that all merged
		cell ranges intersecting the current range will fit completely.
		If the cursor does not point to any range with merged cells, it
		is left unchanged.</p>
	 */
	void collapseToMergedArea();

	//-------------------------------------------------------------------------

	/** expands the cursor to include the entire columns of the cells
		to which it is currently pointing.
	 */
	void expandToEntireColumns();

	//-------------------------------------------------------------------------

	/** expands the cursor to include the entire rows of the cells to
		which it is currently pointing.
	 */
	void expandToEntireRows();

	//-------------------------------------------------------------------------

	/** changes the size of a cursor range.

		<p>The top left cell of the cursor keeps unmodified. </p>

		@param nColumns
			the number of columns of the new cursor range.
		@param nRows
			the number of rows of the new cursor range.
	 */
	void collapseToSize( [in] long nColumns, [in] long nRows );

};

//=============================================================================

}; }; }; };

#endif

