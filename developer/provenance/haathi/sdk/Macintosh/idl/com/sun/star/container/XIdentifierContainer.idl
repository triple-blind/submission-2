/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_container_XIdentifierContainer_idl__ 
#define __com_sun_star_container_XIdentifierContainer_idl__ 
 
#ifndef __com_sun_star_container_XIdentifierReplace_idl__ 
#include <com/sun/star/container/XIdentifierReplace.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
#endif 
 
#ifndef __com_sun_star_container_ElementExistException_idl__ 
#include <com/sun/star/container/ElementExistException.idl> 
#endif 
 
#ifndef __com_sun_star_lang_WrappedTargetException_idl__ 
#include <com/sun/star/lang/WrappedTargetException.idl> 
#endif 
 
#ifndef __com_sun_star_container_NoSuchElementException_idl__ 
#include <com/sun/star/container/NoSuchElementException.idl> 
#endif 
 
//============================================================================= 
 
module com {  module sun {  module star {  module container {  
 
//============================================================================= 
 
/** This is the generic interface for supporting the creation and removal of 
	elements with unique identifiers.

	@see XContainer
 */
published interface XIdentifierContainer: com::sun::star::container::XIdentifierReplace
{ 
	//------------------------------------------------------------------------- 
	 
	/** inserts an element and creates a new unique identifier for it.
		
		@returns
			the newly created identifier under which the element is inserted.

		@param aElement
			The new element that will be inserted.

		@throws com::sun::star::lang::IllegalArgumentException 
			if the argument is not vailid for this container.

		@throws  com::sun::star::lang::WrappedTargetException  
			If the implementation has internal reasons for exceptions,  
			then wrap these in a <type scope="com::sun::star::lang">WrappedTargetException</type> 
			exception.

	 */
	long insert( [in] any aElement ) 
			raises( com::sun::star::lang::IllegalArgumentException,
					com::sun::star::lang::WrappedTargetException ); 
 
	//------------------------------------------------------------------------- 
	 
	/** removes the element with the specified identifier.

		@param Identifier
			The identifier that should be removed.

		@throws com::sun::star::lang::NoSuchElementException 
			If the identifier does not exist.

		@throws  com::sun::star::lang::WrappedTargetException  
			If the implementation has internal reasons for exceptions,  
			then wrap these in a <type scope="com::sun::star::lang">WrappedTargetException</type> 
			exception.
	 */
	void removeByIdentifier( [in] long Identifier ) 
			raises( com::sun::star::container::NoSuchElementException, 
					com::sun::star::lang::WrappedTargetException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
