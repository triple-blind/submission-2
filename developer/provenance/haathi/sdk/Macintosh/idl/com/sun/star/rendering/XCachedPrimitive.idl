/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_rendering_XCachedPrimitive_idl__
#define __com_sun_star_rendering_XCachedPrimitive_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif
#ifndef __com_sun_star_rendering_ViewState_idl__
#include <com/sun/star/rendering/ViewState.idl>
#endif

module com { module sun { module star { module rendering {

/** Interface for cached repaint of already drawn <type>XCanvas</type>
    primitives.<p>

    This interface provides a method to quickly redraw some
    <type>XCanvas</type> primitives, using cached data.<p>

    @since OOo 2.0
 */
published interface XCachedPrimitive : ::com::sun::star::uno::XInterface
{
    /** Redraw the cached primitive.<p>

        Redraw the cached primitive, with a possibly new view state.<p>

        @param aState
        The view state to be used when redrawing the primitive. The
        view state is of course permitted to differ from the one used
        for initial rendering.

        @return a value of type <type>RepaintResult</type>, denoting
        the result of this operation.

        @throws <type>com::sun::star::lang::IllegalArgumentException</type>
        if the view transformation matrix is singular.
     */
    byte redraw( [in] ViewState aState )
        raises (com::sun::star::lang::IllegalArgumentException);
};

}; }; }; };

#endif
