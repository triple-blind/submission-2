/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_ucb_CachedContentResultSet_idl__
#define __com_sun_star_ucb_CachedContentResultSet_idl__

#ifndef __com_sun_star_ucb_ContentResultSet_idl__
#include <com/sun/star/ucb/ContentResultSet.idl>
#endif

//=============================================================================

module com { module sun { module star { module ucb {

//=============================================================================
/** is used on client side to access a <type>ContentResultSet</type>
	remote optimized.

	<p>The <type>CachedContentResultSet</type> will not load every single
	property or even row just in that moment you ask for it, but load the data
	for some rows beforehand.

	<p>Every time when a new package of data is loaded, the so far loaded data
	will be released, so the cash will not grow and grow and grow.
*/

published service CachedContentResultSet
{
	service com::sun::star::ucb::ContentResultSet;

	//-------------------------------------------------------------------------
	/** contains the number of result set rows that should be fethched from
	an underlying database.

	<p>The default fetch size is implementation specific.

	<p>Every negative value for parameter <member>FetchSize</member> will
	force an implementation specific value to be set.
	*/
	[property] long FetchSize;

	 //-------------------------------------------------------------------------
	/** contains the direction for fetching rows from an underlying database.

	<p>The value can be one of the
	<type scope="com::sun::star::sdbc">FetchDirection</type> constants group.

	<p>The default value is implementation specific.

	<p>If you set the value to
	<member scope="com::sun::star::sdbc">FetchDirection::UNKNOWN</member> an
	implementation specific direction will be used.
	*/
	[property] long FetchDirection;
};

//=============================================================================

}; }; }; };

#endif
