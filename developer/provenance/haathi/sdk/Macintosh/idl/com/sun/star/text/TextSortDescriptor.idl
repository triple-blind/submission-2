/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_text_TextSortDescriptor_idl__ 
#define __com_sun_star_text_TextSortDescriptor_idl__ 
 
#ifndef __com_sun_star_util_SortDescriptor_idl__ 
#include <com/sun/star/util/SortDescriptor.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module text {  
 
//============================================================================= 
 
// DocMerge from xml: service com::sun::star::text::TextSortDescriptor
/** describes sort criteria for sorting text.

    @deprecated
 */
published service TextSortDescriptor
{ 
	// DocMerge: empty anyway
	service com::sun::star::util::SortDescriptor; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::Delimiter
	/** contains the character that marks the separation of columns.
	 */
	[property] char Delimiter; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortInTable
	/** determines if the content of a table is to be sorted.
	 */
	[property] boolean IsSortInTable; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::SortRowOrColumnNo0
	/** contains the row or column index used in the first search key.
	 */
	[property] long SortRowOrColumnNo0; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortNumeric0
	/** determines if the sorting in the first search key is done
		numeric or alphanumeric order.
	 */
	[property] boolean IsSortNumeric0; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortAscending0
	/** determines if the sorting in the first search key is done
		in ascending or descending order.
	 */
	[property] boolean IsSortAscending0; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::SortRowOrColumnNo1
	/** contains the row or column index used in the second search key.
	 */
	[property] long SortRowOrColumnNo1; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortNumeric1
	/** determines if the sorting in the second search key is done
		in numeric or alphanumeric order.
	 */
	[property] boolean IsSortNumeric1; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortAscending1
	/** determines if the sorting in the second search key is done
		in ascending or descending order.
	 */
	[property] boolean IsSortAscending1; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::SortRowOrColumnNo2
	/** contains the row or column index used in the third search key.
	 */
	[property] long SortRowOrColumnNo2; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortNumeric2
	/** determines if the sorting in the third search key is done
		in numeric or alphanumeric order.
	 */
	[property] boolean IsSortNumeric2; 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: property com::sun::star::text::TextSortDescriptor::IsSortAscending2
	/** determines if the sorting in the third search key is done
		in ascending or descending order.
	 */
	[property] boolean IsSortAscending2; 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
