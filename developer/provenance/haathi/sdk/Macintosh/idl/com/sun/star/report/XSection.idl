/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_report_XSection_idl__
#define __com_sun_star_report_XSection_idl__

#ifndef __com_sun_star_container_XChild_idl__
#include <com/sun/star/container/XChild.idl>
#endif
#ifndef __com_sun_star_drawing_XShapes_idl__
#include <com/sun/star/drawing/XShapes.idl>
#endif
#ifndef __com_sun_star_container_XEnumerationAccess_idl__
#include <com/sun/star/container/XEnumerationAccess.idl>
#endif
#ifndef __com_sun_star_container_XContainer_idl__
#include <com/sun/star/container/XContainer.idl>
#endif
#ifndef __com_sun_star_util_Color_idl__
#include <com/sun/star/util/Color.idl>
#endif
#ifndef __com_sun_star_beans_XPropertySet_idl__
#include <com/sun/star/beans/XPropertySet.idl>
#endif
#ifndef __com_sun_star_report_XReportDefinition_idl__
#include <com/sun/star/report/XReportDefinition.idl>
#endif
#ifndef __com_sun_star_report_XReportComponent_idl__
#include <com/sun/star/report/XReportComponent.idl>
#endif
//=============================================================================

 module com {  module sun {  module star {  module report {
 published interface XGroup;
//=============================================================================

/** identifies a <type>XSection</type> inside a report.

    <p>A section acts like a container of report components. This generic
    construction allows the definition of hierarchies of reports and their
    dependent subreports.</p>

    @see XReportDefinition
    @see XGroup
 */
published interface XSection
{
    /** allows to navigate to group or report definition.
    */
    interface com::sun::star::container::XChild;
    /** allows to register listeners to be notified of changes in the container.
    */
    interface com::sun::star::container::XContainer;

    /** gives access to the elements by index.
    */
    interface com::sun::star::drawing::XShapes;

    /** creates an enumeration of the elements.
    */
    interface com::sun::star::container::XEnumerationAccess;

    /** provides generic access to the instance properties
    */
    interface com::sun::star::beans::XPropertySet;

    /** allows life-time control of sections.
     */
    interface com::sun::star::lang::XComponent;

    //-------------------------------------------------------------------------

    /** Defines if the section should be visible in report.
    */
    [attribute,bound] boolean Visible;

    /** Defines the name of the section.
    */
    [attribute,bound] string Name;

    /** Defines the height of the section.
    */
    [attribute,bound] unsigned long Height;

    /** Defines the back ground color of the section.
    */
    [attribute,bound] com::sun::star::util::Color BackColor;

    /** determines if the back ground color is set to transparent.
     */
    [attribute,bound] boolean BackTransparent;

    /** Defines the expression which is executed before printing the section.
        If the return value of the expression is <TRUE/> then the section will be printed.
    */
    [attribute,bound] string ConditionalPrintExpression;

    /** Specifies wether the section is printed on a separate page.
        <p>Not valid for page header or page footer.</p>
        @see ForceNewPage
    */
    [attribute,bound] short ForceNewPage
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /** Specifies wether the section is printed in a new row or column within a multi column report.
        <p>Not valid for page header or page footer.</p>
        @see ForceNewPage
    */
    [attribute,bound] short NewRowOrCol
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /** Specifies that the section is printed on one page.
    <p>Not valid for page header or page footer.</p>
    */
    [attribute,bound] boolean KeepTogether
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /** Specifies that elements with dynamic state will be expanded vertically when then content of the element is larger than it's container.
        If this property is disabled the content will be truncated when it's size is larger than the container.
    */
    [attribute,bound] boolean CanGrow
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

/**
  <p>Represents ...</p>

 */
    [attribute,bound] boolean CanShrink
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /** Defines that the group header should be repeated on the next page when a group spans more than one page.
        It only applies to group headers.
    */
    [attribute,bound] boolean RepeatSection
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /** Specifies the parent of the section if it is a group header or group footer.
    */
    [attribute,readonly] com::sun::star::report::XGroup Group;

    /** Specifies the parent of the section if it is a page header or page footer.
    */
    [attribute,readonly] com::sun::star::report::XReportDefinition ReportDefinition;
};

service Section : XSection;
//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif
