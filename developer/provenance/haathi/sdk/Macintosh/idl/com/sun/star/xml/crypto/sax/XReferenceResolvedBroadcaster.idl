/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


 
//i20156 - new file for xmlsecurity module

/** -- idl definition -- **/

#ifndef __com_sun_star_xml_crypto_sax_xreferenceresolvedbroadcaster_idl_
#define __com_sun_star_xml_crypto_sax_xreferenceresolvedbroadcaster_idl_

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/uno/Exception.idl>

module com { module sun { module star { module xml { module crypto { module sax {

interface XReferenceResolvedListener;

/**
 * Interface of Reference Resolved Broadcaster.
 * <p>
 * This interface is used to manipulate reference resolved listener.
 */
interface XReferenceResolvedBroadcaster : com::sun::star::uno::XInterface
{
	/**
	 * Adds a new reference resolved listener for a element collector.
	 * <p>
	 * When the element collector has completely collected that element,
	 * this listener will receive a notification.
	 *
	 * @param referenceId   the id of the element collector for which
	 *                      the new listener is added
	 * @param listener      the listener to be added
	 */
	void addReferenceResolvedListener(
		[in] long referenceId,
		[in] XReferenceResolvedListener listener);
		
	/**
	 * Removes a listener from a element collector.
	 * <p>
	 * When a listener is removed, it will not receive notification when
	 * collection completes.
	 *
	 * @param referenceId   the id of the element collector from which
	 *                      the listener is removed
	 * @param listener      the listener to be removed
	 */
	void removeReferenceResolvedListener(
		[in] long referenceId, 
		[in] XReferenceResolvedListener listener);
};

} ; } ; } ; } ; } ; } ;


#endif

