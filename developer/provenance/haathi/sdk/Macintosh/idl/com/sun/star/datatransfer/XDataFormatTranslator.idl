/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/




#ifndef __com_sun_star_datatransfer_XDataFormatTranslator_idl__
#define __com_sun_star_datatransfer_XDataFormatTranslator_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_datatransfer_DataFlavor_idl__
#include <com/sun/star/datatransfer/DataFlavor.idl>
#endif

module com { module sun { module star { module datatransfer {

//=============================================================================
/** Interface to be implemented by objects used to translate a <type>DataFlavor</type> to 
    a system dependent data transfer type and vice versa. 

	<p>Different platforms use different types to describe data formats available 
	during data exchange operations like clipboard or drag&drop. Windows for instance
	uses integer values to describe an available clipboard or drag&drop format, Unix 
	X11 uses so called Atoms etc.</p>	 
*/

published interface XDataFormatTranslator : com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** Converts a <type>DataFlavor</type> to system dependend data type.

		@param aDataFlavor
		Describes the format for which a system dependent data types is requested.

		@returns
		A system dependent data transfer type for the given <type>DataFlavor</type>
		if there is one available. 
		<p>If the is no system dependent data type for a given <type>DataFlavor</type>
		the returned any is empty.</p>
	*/
	any getSystemDataTypeFromDataFlavor( [in] DataFlavor aDataFlavor );

	//-------------------------------------------------------------------------
	/** Converts a system dependent data type to a <type>DataFlavor</type>.

		@param aSysDataType
		A system dependent data type. If aSysDataType is empty so is the returned <type>DataFlavor</type>.

		@returns		
		A <type>DataFlavor</type> for the given system dependent data transfer type.
		<p>If there is no appropriate mapping for a sytem dependent data type, the returned <type>DataFlavor</type> will be empty.</p>
	*/
	DataFlavor getDataFlavorFromSystemDataType( [in] any aSysDataType );
};

}; }; }; };

#endif

