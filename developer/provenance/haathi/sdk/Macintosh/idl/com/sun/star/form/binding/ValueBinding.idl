/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_form_binding_ValueBinding_idl__
#define __com_sun_star_form_binding_ValueBinding_idl__

#ifndef __com_sun_star_util_XValueBinding_idl__
#include <com/sun/star/form/binding/XValueBinding.idl>
#endif
#ifndef __com_sun_star_beans_XPropertySet_idl__
#include <com/sun/star/beans/XPropertySet.idl>
#endif
#ifndef __com_sun_star_lang_XComponent_idl__
#include <com/sun/star/lang/XComponent.idl>
#endif
#ifndef __com_sun_star_util_XModifyBroadcaster_idl__
#include <com/sun/star/util/XModifyBroadcaster.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form { module binding {

//=============================================================================

/** defines a component which allows access to a single value

    <p>Read/Write access to the value represented by this component is supported,
    as well as (optionally) active broadcasting of value changes</p>
*/
service ValueBinding
{
    /** determines whether the value is currently readonly

        <p>For instance, you could imagine a <type>ValueBinding</type> which
        represents a cell in a spreadsheet document, and whose value is readonly
        as long as the spreadsheet is locked.</p>

        <p>As long as this property is <TRUE/>, the value binding should throw
        a <type>InvalidBindingStateException</type> when its
        <member>XValueBinding::setValue</member> method is invoked.</p>
    */
    [optional, property, bound, readonly]  boolean  ReadOnly;

    /** determines the relevance of the value represented by the binding

        <p>In a more complex scenario, where different form controls are bound to different
        values, which all are part of a larger data structure, some of the items in this
        data structure may not be relevant currently. This is indicated by the
        <member>Relevant</member> property being <FALSE/>.</p>

        <p><type>XBindableValue</type>s which are bound to this binding may or may not
        react in certain ways on the (ir)relevance of their bound value.</p>

        <p>One possible reaction could be that user interface elements which are associated
        with the <type>XBindableValue</type> are disabled as long as <member>Relevant</member>
        is <FALSE/>.</p>
    */
    [optional, property, bound, readonly]  boolean  Relevant;

	//-------------------------------------------------------------------------
	/** allows access to the properties of the binding
    */
    [optional] interface   com::sun::star::beans::XPropertySet;

    //-------------------------------------------------------------------------
	/** allows read and write access to the value represented by this binding
    */
    interface XValueBinding;

    /** allows other components to be notified when the value represented
        by the <type>ValueBinding</type> instance changes.

        <p>This interface is optional, since a binding may not support
        actively notifying changes in it's value. Note, however, that in case
        this interface is not supported, the bound component cannot react
        on value changes, and will thus override any values which are
        set by an instance other than itself.</p>
    */
    [optional] interface com::sun::star::util::XModifyBroadcaster;

    /** allows life time control for the component

        <p>An <type>ValueBinding</type> may be known to one ore more components
        supporting the <type>XBindableValue</type> interface, which all work with
        this binding. However, they will not <em>own</em> the <type>ValueBinding</type>.
        The ownership is with another instance, which may also decide to obsolete
        the <type>ValueBinding</type> for whatever reasons (e.g. because the data model
        which the binding reflected died). For this reason, a <type>ValueBinding</type>
        must offer a possibility to be obsoleted by it's owner, and to notify this
        obsoletion to other interested parties, such as <type>XBindableValue</type>s.</p>
    */
    interface com::sun::star::lang::XComponent;
};

//=============================================================================

}; }; }; }; };

#endif
