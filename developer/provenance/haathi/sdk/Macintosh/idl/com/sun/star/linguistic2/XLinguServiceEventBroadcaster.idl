/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_linguistic2_XLinguServiceEventBroadcaster_idl__
#define __com_sun_star_linguistic2_XLinguServiceEventBroadcaster_idl__


#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_linguistic2_XLinguServiceEventListener_idl__
#include <com/sun/star/linguistic2/XLinguServiceEventListener.idl>
#endif

//=============================================================================

module com { module sun { module star { module linguistic2 {

//=============================================================================
/** is used to register a listener for LinguServiceEvents.

	<P>This interface may be used by spellchecker or hyphenator 
	implementations to allow clients to be registered and informed about
	<type scope="com::sun::star::linguistic2">LinguServiceEvent</type>s.
	</P>

	<P>Note: The LinguServiceManager forwards the
	<type scope="com::sun::star::linguistic2">LinguServiceEvent</type>s
	it receives (from spellcheckers or hyphenators) to its own listeners.
	Thus, there should be no need to register
	as a listener for a specific implementation./P>

    @see    <type scope="com::sun::star::linguistic2">XLinguServiceManager</type>
    @see    <type scope="com::sun::star::linguistic2">XLinguServiceEventListener</type>
*/
published interface XLinguServiceEventBroadcaster : com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/**
	 	@returns
		 	<TRUE/> if the listener was successfully added,
			<FALSE/> otherwise.

		@param xLstnr
			the listener to be addded.
	 */
	boolean	addLinguServiceEventListener (
		[in] com::sun::star::linguistic2::XLinguServiceEventListener	xLstnr );

	//-------------------------------------------------------------------------
	/**
	 	@returns
		 	<TRUE/> if the listener was successfully removed,
			<FALSE/> otherwise.

		@param xLstnr
			the listener to be removed.
	 */
	boolean	removeLinguServiceEventListener (
		[in] com::sun::star::linguistic2::XLinguServiceEventListener	xLstnr );

};

//=============================================================================

}; }; }; };

#endif

