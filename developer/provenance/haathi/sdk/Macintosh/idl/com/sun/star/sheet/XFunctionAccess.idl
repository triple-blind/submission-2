/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_sheet_XFunctionAccess_idl__
#define __com_sun_star_sheet_XFunctionAccess_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_container_NoSuchElementException_idl__
#include <com/sun/star/container/NoSuchElementException.idl>
#endif

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module sheet {

//=============================================================================

/** allows generic access to all spreadsheet functions.

	@see com::sun::star::sheet::FunctionAccess
 */
published interface XFunctionAccess: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------

	/** calls a function and returns the result of the call.

		@param aName
		the (programmatic) name of the function.

		@param aArguments
		the arguments for the function call.
		<p>Each element must be of one of the following types:</p>

		<dl>
		<dt><atom>long</atom> or <atom>double</atom></dt>
		<dd>for a numeric value.</dd>

		<dt><atom>string</atom></dt>
		<dd>for a textual value.</dd>

		<dt><atom>long[][]</atom> or <atom>double[][]</atom></dt>
		<dd>for an array of numeric values.</dd>

		<dt><atom>string[][]</atom></dt>
		<dd>for an array of textual values.</dd>

		<dt><atom>any[][]</atom></dt>
		<dd>for a mixed array, where each element must be of <void/>,
		<atom>long</atom>, <atom>double</atom> or <atom>string</atom>
		type.</dd>

		<dt><type scope="com::sun::star::table">XCellRange</type></dt>
		<dd>for a <type>SheetCellRange</type> object that contains the
		data.</dd>
		</dl>

		@returns
			the result of the function call.

			<p>Possible types for the result are:</p>

			<dl>
			<dt><void/></dt>
			<dd>if no result is available.</dd>

			<dt><atom>double</atom></dt>
			<dd>for a numeric result.</dd>

			<dt><atom>string</atom></dt>
			<dd>for a textual result.</dd>

			<dt><atom>any[][]</atom></dt>
			<dd>for an array result, containing <atom>double</atom> and
			<atom>string</atom> values.</dd>
			</dl>

		@throws <type scope="com::sun::star::container">NoSuchElementException</type>
			if the named function does not exist.

		@throws <type scope="com::sun::star::lang">IllegalArgumentException</type>
			if the function can not be called with these arguments.
	 */
	any callFunction( [in] string aName, [in] sequence< any > aArguments )
			raises( com::sun::star::container::NoSuchElementException,
					com::sun::star::lang::IllegalArgumentException );
};

//=============================================================================

}; }; }; };

#endif

