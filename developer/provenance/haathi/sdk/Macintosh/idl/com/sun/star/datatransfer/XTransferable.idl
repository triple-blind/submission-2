/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_datatransfer_XTransferable_idl__
#define __com_sun_star_datatransfer_XTransferable_idl__

#ifndef __com_sun_star_datatransfer_UnsupportedFlavorException_idl__
#include <com/sun/star/datatransfer/UnsupportedFlavorException.idl>
#endif

#ifndef __com_sun_star_datatransfer_DataFlavor_idl__
#include <com/sun/star/datatransfer/DataFlavor.idl>
#endif

#ifndef __com_sun_star_io_IOException_idl__
#include <com/sun/star/io/IOException.idl>
#endif

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

//=============================================================================

module com { module sun { module star { module datatransfer {

//=============================================================================
/** Interface to be implemented by objects used to provide data for a data 
	transfer operation.

    @see com::sun::star::datatransfer::DataFlavor
*/

published interface XTransferable: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** Called by a data consumer to obtain data from the source in a specified 
		format.
		
		@param aFlavor
		Describes the requested data format 

		@returns
		The data in the specified <type>DataFlavor</type>.

		@throws com::sun::star::io::IOException 
		if the data is no longer available in the requested flavor.
			
		@throws com::sun::star::datatransfer::UnsupportedFlavorException
		if the requested <type>DataFlavor</type> is not supported.		
	*/
	any getTransferData( [in] DataFlavor aFlavor )
		raises ( UnsupportedFlavorException, com::sun::star::io::IOException );

	//-------------------------------------------------------------------------
	/** Returns a sequence of supported <type>DataFlavor</type>.

		@returns
		The sequence of supported <type>DataFlavor</type>.

		@see com::sun::star::datatransfer::DataFlavor
	*/
	sequence < DataFlavor > getTransferDataFlavors();

	//-------------------------------------------------------------------------
	/** Checks if the data object supports the specified data flavor.

		@param aFlavor 
		Describes the format that should be checked

		@returns
		A value of <TRUE/> if the <type>DataFlavor</type> is supported by the transfer source.
		<p>A value of <FALSE/> if the <type>DataFlavor</type> is unsupported by the transfer source.</p>
		
		<br/><br/><p><strong>Note: </strong>This method is only for analogy with the JAVA Clipboard interface. To
		avoid many calls, the caller should instead use 
		<member scope="com::sun::star::datatransfer">XTransferable::getTransferDataFlavors()</member>.		
	*/
	boolean isDataFlavorSupported( [in] DataFlavor aFlavor );
};

//=============================================================================

}; }; }; }; 

#endif
