/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_chart_XComplexDescriptionAccess_idl__ 
#define __com_sun_star_chart_XComplexDescriptionAccess_idl__ 
 
#ifndef __com_sun_star_chart_XChartDataArray_idl__ 
#include <com/sun/star/chart/XChartDataArray.idl> 
#endif 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module chart {  
 
//============================================================================= 
 
/** Offers access to complex column and row descriptions.

<p>Can be obtained from interface <type>XChartDocument</type> via method getData().</p>

@since OOo 3.3
*/

published interface XComplexDescriptionAccess : XChartDataArray
{ 
	//------------------------------------------------------------------------- 

	/** retrieves the description texts for all rows.

    	@returns
        	a sequence of sequences of strings representing the descriptions
        	of all rows. The outer index represents different rows.
            The inner index represents the different levels (usually there is only one).
	 */
	sequence< sequence< string > > getComplexRowDescriptions();
 
	//------------------------------------------------------------------------- 
	 
	/** sets the description texts for all rows.
    
        @param rRowDescriptions
            a sequence of sequences of strings representing the descriptions of all
        	rows. The outer index represents different rows.
            The inner index represents the different levels (usually there is only one).
    */
	void setComplexRowDescriptions( [in] sequence< sequence< string > > rRowDescriptions ); 
 
	//------------------------------------------------------------------------- 

	/** retrieves the description texts for all columns.
    
        @returns
        	a sequence of sequences of strings representing the descriptions
        	of all columns. The outer index represents different columns.
            The inner index represents the different levels (usually there is only one).
	 */
	sequence< sequence< string > > getComplexColumnDescriptions();
 
	//------------------------------------------------------------------------- 

	/** sets the description texts for all columns.

        @param rColumnDescriptions
        	a sequence of sequences of strings which represent the descriptions of
        	all columns. The outer index represents different columns.
            The inner index represents the different levels (usually there is only one).
	 */
	void setComplexColumnDescriptions( [in] sequence< sequence< string > > rColumnDescriptions );
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
