/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_accessibility_XAccessible_idl__
#define __com_sun_star_accessibility_XAccessible_idl__

#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 

module com { module sun { module star { module accessibility {

 published interface XAccessibleContext;

/** This interface has to be implemented by any class that wants to be
    accessible.
    
    <p>It is used to provide access to the <type>XAccessibleContext</type>
    interface but allows at the same time that that interface is implemented
    by another class.</p>
    
    <p>The distinction between the interfaces <type>XAccessible</type> and
    <type>XAccessibleContext</type> makes it possible to split up the
    implementation of the
    class that is made accessible and the actual accessibility code into two
    (mostly) independant parts.  The only necessary dependance is the
    <member scope="XAccessible">getAccessibleContext()</member> function
    that returns the accessible context.  This one-way link has to be
    persistant in some sense: As long as there is at least one reference to
    a specific <type>XAccessibleContext</type> object the
    <type>XAccessible</type> object has to return the same context for every
    call to <member scope="XAccessible">getAccessibleContext()</member>.
    This is necessary to allow the use of object identity for comparing
    accessibility contexts for being equal.</p>

    @see AccessibleContext

    @since OOo 1.1.2
*/
published interface XAccessible : ::com::sun::star::uno::XInterface
{
    /** Returns the AccessibleContext associated with this object.  
    
        <p>The idea to let this interface only return an
        <type>XAccessibleContext</type> instead of directly supporting its
        functions is to allow the seperation of the implementation of the
        functions that make a class accessible from the implementation of
        that class.  You may, of course, implement <type>XAccessible</type>
        and <type>XAccessibleContext</type> in one class.</p>
        
        @return
            A reference to the object that contains the actual accessibility
            information.
            
        @see AccessibleContext
	*/
    XAccessibleContext getAccessibleContext ();
};
          
}; }; }; };

#endif
