/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_bridge_oleautomation_NamedArgument_idl__ 
#define __com_sun_star_bridge_oleautomation_NamedArgument_idl__ 
 
 
module com {  module sun {  module star {  module bridge {  module oleautomation {
 
/** represents a named argument in a call to a method of an Automation object.
    <p>
    The Automation bridge accepts values of <type>NamedArgument</type> when a
    call to an Automation object is made. The call is done through the
    <method scope="com::sun::star::script">XInvocation::invoke</method>
    method, which takes all arguments in a sequence of anys. Usually the order
    of the arguments must correspond to the order of arguments in the Automation
    method. By using instances of <type>NamedArgument</type> the arguments in the
    sequence can be unordered. The Automation object being called must support
    named arguments, otherwise the call fails.
    </p>
	
    @since OOo 1.1.2
 */
struct NamedArgument
{
    /** The name of the argument, for which
        <member>NamedArgument::Value</member> is intended.
     */
    string Name;

    /** The value of the argument whoose name is the one as contained in the
        member <member>Name</member>.
     */
    any Value;
}; 
 
}; }; }; }; }; 
 

#endif 
