/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_xml_sax_InputSource_idl__ 
#define __com_sun_star_xml_sax_InputSource_idl__ 
 
#ifndef __com_sun_star_io_XInputStream_idl__ 
#include <com/sun/star/io/XInputStream.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module xml {  module sax {  
 
//============================================================================= 
 
/** specifies the Datasource plus some additional information for the parser.
	
	<p>There are two places where the application will deliver this input
	source to the parser: 
	</p>
	<ul>
		<li>as the argument of <method>XParser::parseStream</method></li>
		<li>as the return value of <method>XEntityReslover::resolveEntity</method>.
	</li>
	</ul>
 */
published struct InputSource
{
	/** contains the byte input stream of the document.
	 */
	com::sun::star::io::XInputStream aInputStream; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains the encoding of the data stream. This is used by the parser 
		to do unicode conversions. 
		
		<p>Note that in general you do not need to specify an encoding. 
		Either it is UTF-8 or UTF-16 which is recognized by the parser 
		or it is specified in the first line of the XML-File 
		( e.g. <em>?xml encoding="EUC-JP"?</em> ).</p>
	 */
	string sEncoding; 
 
	//------------------------------------------------------------------------- 
	 
	/** constains the public Id of the document, for example, needed in 
		exception-message strings.
	 */
	string sPublicId; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains the sytemID of the document.
	 */
	string sSystemId; 
}; 
 
//============================================================================= 
 
}; }; }; }; };  
 
#endif 
