/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_setup_XSetup_idl__
#define __com_sun_star_setup_XSetup_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#include <com/sun/star/setup/OSType.idl>
#include <com/sun/star/setup/UpdateType.idl>
#include <com/sun/star/setup/ModuleInfo.idl>
#include <com/sun/star/setup/InstallEnvironment.idl>
#include <com/sun/star/setup/InstallResponse.idl>
#include <com/sun/star/setup/VersionIdentifier.idl>
#include <com/sun/star/setup/SizeInfo.idl>
#include <com/sun/star/setup/MirrorEntry.idl>

module com {  module sun {  module star {  module setup {

/// @deprecated
published interface XSetup: com::sun::star::uno::XInterface
{
	// DocMerge: empty anyway
	boolean					isVersionSupported			( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	sequence <short>		getAvailableLanguages		( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	ModuleInfo				getRootModule				( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	void 					setHiddenModule				( [in] VersionIdentifier aVerIdentifier,
														  [in] string strModuleID,
														  [in] boolean bHidden );

	// DocMerge: empty anyway
	string					getProductname				( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	string					getVendorname				( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	string					getDefaultDestinationPath	( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	SizeInfo				getStandardSizeValues		( [in] VersionIdentifier aVerIdentifier,
														  [in] sequence <short> seqLanguages );

	// DocMerge: empty anyway
	string					getHelpText					( [in] VersionIdentifier aVerIdentifier,
														  [in] string strPagename );

	// DocMerge: empty anyway
	string					getReadmeText				( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	string					getLicenseText				( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	string					getNativeLocation			( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	sequence < any >   		getMirrorList				( [in] VersionIdentifier aVerIdentifier );

	// DocMerge: empty anyway
	UpdateType		   		isUpdateAvailable			( [in] VersionIdentifier aVerIdentifier,
														  [out] VersionIdentifier aNewVerIdentifier );

	// DocMerge: empty anyway
	boolean			   		isModuleAvailable			( [in] VersionIdentifier aVerIdentifier,
														  [in] string strModuleID );

	// DocMerge: empty anyway
	sequence < any >   		getActionListForInstall		( [in] VersionIdentifier aVerIdentifier,
														  [in] VersionIdentifier aOldVerIdentifier,
														  [in] InstallEnvironment aEnvironment,
														  [out] InstallResponse aResponse );
	};

}; }; }; };

#endif
