/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_io_ObjectInputStream_idl__ 
#define __com_sun_star_io_ObjectInputStream_idl__ 
 
#ifndef __com_sun_star_io_XObjectInputStream_idl__ 
#include <com/sun/star/io/XObjectInputStream.idl> 
#endif 
 
#ifndef __com_sun_star_io_XActiveDataSink_idl__ 
#include <com/sun/star/io/XActiveDataSink.idl> 
#endif 
 
#ifndef __com_sun_star_io_XConnectable_idl__ 
#include <com/sun/star/io/XConnectable.idl> 
#endif 
 
#ifndef __com_sun_star_io_XMarkableStream_idl__ 
#include <com/sun/star/io/XMarkableStream.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: service com::sun::star::io::ObjectInputStream
/** is a stream which allows reading the data of persistent objects.
	
	<p>Implementations of this service must fulfill the specifications of the 
	<type>DataInputStream</type> service. It must be chained to an 
	<type>XMarkableStream</type>. Therefore, it provides the 
	<type>XMarkableStream</type> interface, and delegates the calls to the 
	chained object.  </p>
	<p>The written objects are held until this instance is destroyed.
	The references to the objects are read as four-byte integers.
	Data format reads:</p>

	<pre>
	short   InfoLength
	long    ObjectReference  // 0 indicates no object
	UTF     ServiceName      // length of 0 indicates this is only a reference
	long    ObjectLength     // 0 if it is a reference or no object, otherwise the len of the object data
	Object  ObjectData       // the data of the object
	...                      // skipping additional data
	</pre>
	
	@guarantees
	<ul>
		<li>-thread safe</li>
		<li>-allow buffer size is 2 ^ 31 -1</li>
		<li>-maximum object reference identifier must be the number of objects. </li>
		<li>-object reference identifier 0 indicates no object</li>
		<li>-skip addition data</li>
		<li>-set the stream position behind the object data</li>
	</ul>
 */
published service ObjectInputStream
{ 
    /** allows to read the data from the stream.
     */
	interface com::sun::star::io::XObjectInputStream; 
	
	/** allows to set the underlying inputstream */
	interface com::sun::star::io::XActiveDataSink; 
	
	/** allows to navigate via a chain of streams */
	interface com::sun::star::io::XConnectable; 
	
	/** allows to set marks within the stream. The implementation
     may forward calls to this interface to a chained markablestream. */
	interface com::sun::star::io::XMarkableStream; 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
