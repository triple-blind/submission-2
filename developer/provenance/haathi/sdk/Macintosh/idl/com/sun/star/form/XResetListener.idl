/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_form_XResetListener_idl__ 
#define __com_sun_star_form_XResetListener_idl__ 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
#ifndef __com_sun_star_lang_EventObject_idl__ 
#include <com/sun/star/lang/EventObject.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module form {  
 
//============================================================================= 
 
/** is the interface for receiving notificaions about reset events.
	
	<p>The listener is called if a component implementing the 
	<type>XReset</type> interface performs a reset.</br>
	Order of events:
	<ul><li>a reset is triggered on a component</li>
		<li>the component calls <member>XReset::approveReset</member> on all its listeners</li>
		<li>if all listeners approve the reset operation, the data is reset</li>
		<li>the component calls <member>XReset::resetted</member> on all its listeners</li>
	</ul>
	</p>
	
	@see      XReset
 */
published interface XResetListener: com::sun::star::lang::XEventListener
{ 
	//------------------------------------------------------------------------- 
	 
	/** is invoked before a component is reset.
		
		@param rEvent
			the event happend.

		@returns
			<TRUE/> when reset was approved, <FALSE/> when the reset operation should be cancelled.
	 */
	boolean approveReset( [in] com::sun::star::lang::EventObject rEvent ); 
 
	//------------------------------------------------------------------------- 
	 
	/** is invoked when a component has been reset.

		@param rEvent
			the event happend.
	 */
	[oneway] void resetted( [in] com::sun::star::lang::EventObject rEvent ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
