/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_configuration_backend_LayerFilter_idl__
#define __com_sun_star_configuration_backend_LayerFilter_idl__

#ifndef __com_sun_star_configuration_backend_XLayer_idl__
#include <com/sun/star/configuration/backend/XLayer.idl>
#endif

#ifndef __com_sun_star_lang_XInitialization_idl__
#include <com/sun/star/lang/XInitialization.idl>
#endif

//==============================================================================

module com { module sun { module star { module configuration { module backend {

//==============================================================================

/**
  provides a filtered version of a configuration data <type>Layer</type>.

  <p> A layer filter wraps a source <type>XLayer</type> object and 
     provides access to a filtered version of its data.
     The data read from the filter usually is produced from the source data 
     by adding and removing elements or modifying values.
  </p>

  @see com::sun::star::configuration::backend::DataImporter
        Service that supports applying a <type>LayerFilter</type> to imported data.

  @since OOo 2.0
  */
published service LayerFilter
{
    //--------------------------------------------------------------------------

    /**
      provides read access to the filtered contents.

      <p> Method <member>XLayer::readData</member> will render a filtered version 
         of the data produced by the same method of the source object.
     </p>
      */
    interface XLayer ;

    //--------------------------------------------------------------------------

    /**
      provides a means to set the source data for the filter.
      
      <p> Call <method scope="com::sun::star::lang">XInitialization::initialize</method>()
         with a single argument of type <type scope="com::sun::star::beans">NamedValue</type>,
         where <member scope="com::sun::star::beans">NamedValue::Name</member> is <code>"Source"</code>
         and <member scope="com::sun::star::beans">NamedValue::Value</member> 
         is an object implementing <type>XLayer</type>.
     </p>
      */
    interface com::sun::star::lang::XInitialization ;

    //--------------------------------------------------------------------------
} ;

//==============================================================================

} ; } ; } ; } ; } ;

#endif

