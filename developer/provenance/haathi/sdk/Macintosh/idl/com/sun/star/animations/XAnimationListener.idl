/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_animations_XAnimationListener_idl__
#define __com_sun_star_animations_XAnimationListener_idl__

#ifndef __com_sun_star_lang_XEventListener_idl__
#include <com/sun/star/lang/XEventListener.idl>
#endif
#ifndef __com_sun_star_animations_XAnimationNode_idl__
#include <com/sun/star/animations/XAnimationNode.idl>
#endif

//=============================================================================

 module com {  module sun {  module star {  module animations {

//=============================================================================

/** makes it possible to register listeners, which are called whenever
    an animation event occurs.

    @since OOo 3.0
 */
published interface XAnimationListener : ::com::sun::star::lang::XEventListener
{
    /** This event is raised when the element local timeline begins to play.
        <p>It will be raised each time the element begins the active duration (i.e. when it restarts, but not when it repeats).</p>
        <p>It may be raised both in the course of normal (i.e. scheduled or interactive) timeline play, as well as in the
        case that the element was begun with an interface method.</p>

        @param Node
            The node that begins to play.
    */
    void beginEvent( [in] XAnimationNode Node );

    /** This event is raised at the active end of the element.
        <p>Note that this event is not raised at the simple end of each repeat.</p>
        <p>This event may be raised both in the course of normal (i.e. scheduled or interactive) timeline play, as well as in the
        case that the element was ended with a DOM method.</p>

        @param Node
            The node that stops playing.
    */
    void endEvent( [in] XAnimationNode Node );

    /** This event is raised when the element local timeline repeats.
        <p>It will be raised each time the element repeats, after the first iteration.</p>
        <p>Associated with the repeat event is an integer that indicates which repeat iteration is
        beginning.

        @param Node
            The node that repeats.

        @param Repeat
            The value is a 0-based integer, but the repeat event is not raised for the first iteration and so the observed values will be >= 1.
    */
    void repeat( [in] XAnimationNode Node, [in] long Repeat );
};

//=============================================================================

}; }; }; };

#endif
