/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_io_XDataInputStream_idl__ 
#define __com_sun_star_io_XDataInputStream_idl__ 
 
#ifndef __com_sun_star_io_XInputStream_idl__ 
#include <com/sun/star/io/XInputStream.idl> 
#endif 
 
#ifndef __com_sun_star_io_IOException_idl__ 
#include <com/sun/star/io/IOException.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XDataInputStream
/** makes it possible to read machine-independent simple data types from a
	stream.
    @see com::sun::star::io::XDataOutputStream
 */
published interface XDataInputStream: com::sun::star::io::XInputStream
{ 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readBoolean
	/** reads in a boolean. It is an 8-bit value. 0 means FALSE; all
		other values mean TRUE.
	 */
	byte readBoolean() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readByte
	/** reads an 8-bit byte.
	 */
	byte readByte() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readChar
	/** reads a 16-bit unicode character.
	 */
	char readChar() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readShort
	/** reads a 16-bit big endian integer.
	 */
	short readShort() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readLong
	/** reads a 32-bit big endian integer.
	 */
	long readLong() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readHyper
	/** reads a 64-bit big endian integer.
	 */
	hyper readHyper() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readFloat
	/** reads a 32-bit IEEE float.
	 */
	float readFloat() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readDouble
	/** reads a 64-bit IEEE double.
	 */
	double readDouble() 
			raises( com::sun::star::io::IOException ); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XDataInputStream::readUTF
	/** reads a string of UTF encoded characters.
	 */
	string readUTF() 
			raises( com::sun::star::io::IOException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
