/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_frame_XDispatchProviderInterception_idl__
#define __com_sun_star_frame_XDispatchProviderInterception_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_frame_XDispatchProviderInterceptor_idl__
#include <com/sun/star/frame/XDispatchProviderInterceptor.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** makes it possible to register an <type>XDispatchProvider</type> which
    intercepts all requests of <type>XDispatch</type> to this instance.

    <p>
    Note: Nobody can guarantee order of used interceptor objects if more then ones exist.
    Later registered ones will be used at first. But it's possible to increase the chance
    for that by providing the optional interface <type>XInterceptorInfo</type>.
    </p>

    @see XDispatchProvider
    @see XDispatch
    @see XInterceptorInfo
 */
published interface XDispatchProviderInterception: com::sun::star::uno::XInterface
{
	//-------------------------------------------------------------------------
	/** registers an <type>XDispatchProviderInterceptor</type>, which will become
		the first interceptor in the chain of registered interceptors.

        @param Interceptor
            the interceptor which whish to be registered

        @see XDispatchProviderInterception::releaseDispatchProviderInterceptor()
	 */
    void registerDispatchProviderInterceptor( [in] XDispatchProviderInterceptor Interceptor );

	//-------------------------------------------------------------------------
	/** removes an <type>XDispatchProviderInterceptor</type> which was previously registered

        <p>
        The order of removals is arbitrary. It is not necessary to remove the last
        registered interceptor first.
        </p>

        @param Interceptor
            the interceptor which whish to be unregistered

        @see XDispatchProviderInterception::registerDispatchProviderInterceptor()
	 */
    void releaseDispatchProviderInterceptor( [in] XDispatchProviderInterceptor Interceptor );
};

//=============================================================================

}; }; }; };

#endif
