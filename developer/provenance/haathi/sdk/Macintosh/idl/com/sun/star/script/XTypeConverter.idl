/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_script_XTypeConverter_idl__ 
#define __com_sun_star_script_XTypeConverter_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_reflection_XIdlClass_idl__ 
#include <com/sun/star/reflection/XIdlClass.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
#endif 
 
#ifndef __com_sun_star_script_CannotConvertException_idl__ 
#include <com/sun/star/script/CannotConvertException.idl> 
#endif 
 
#ifndef __com_sun_star_uno_TypeClass_idl__ 
#include <com/sun/star/uno/TypeClass.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module script {  
 
//============================================================================= 
 
/** Interface to provide standard type conversions.
    
    @see Converter
*/
published interface XTypeConverter: com::sun::star::uno::XInterface
{ 
	/** Converts the value <code>aFrom</code> to the specified type
        <code>xDestinationType</code>.
        Throws an <type>CannotConvertException</type> if the conversion
        failed.
        @param aFrom
               source value
        @param xDestinationType
               destination type
        @return
                converted value (any carrying value of type <code>xDestinationType</code>
    */
	any convertTo(
        [in] any aFrom, 
        [in] type xDestinationType ) 
        raises( com::sun::star::lang::IllegalArgumentException, 
                com::sun::star::script::CannotConvertException ); 
    
	/** Converts the value <code>aFrom</code> to the specified simple type
        <code>aDestinationType</code>.
        Throws an <type>CannotConvertException</type> if the conversion
        failed and an <type scope="com::sun::star::lang">IllegalArgumentException</type>
        if the destination
        <type scope="com::sun::star::uno">TypeClass</type> is not simple,
        e.g. not long or byte.
        
        @param aFrom
               source value
        @param aDestinationType
               destination type class
        @return
                converted value (any carrying value of type <code>aDestinationType</code>
    */
	any convertToSimpleType(
        [in] any aFrom, 
        [in] com::sun::star::uno::TypeClass aDestinationType ) 
        raises( com::sun::star::lang::IllegalArgumentException, 
                com::sun::star::script::CannotConvertException ); 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
