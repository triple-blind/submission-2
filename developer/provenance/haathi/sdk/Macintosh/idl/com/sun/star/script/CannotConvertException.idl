/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_script_CannotConvertException_idl__ 
#define __com_sun_star_script_CannotConvertException_idl__ 
 
#ifndef __com_sun_star_uno_Exception_idl__ 
#include <com/sun/star/uno/Exception.idl> 
#endif 
 
#ifndef __com_sun_star_uno_TypeClass_idl__ 
#include <com/sun/star/uno/TypeClass.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module script {  
 
//============================================================================= 
 
/** This exception is thrown to indicate that a type conversion can not be performed.
*/
published exception CannotConvertException: com::sun::star::uno::Exception
{ 
	/** This member contains the class of the type to which the value should be
		converted.
    */
	com::sun::star::uno::TypeClass DestinationTypeClass; 
    
	/** This member contains the reason that the conversion failed.
        Have a look at <type>FailReason</type>.
    */
	long Reason; 
    
	/** If the conversion of a method argument fails, this is the index
		of the value in the "IN" argument list. [optional]
    */
	long ArgumentIndex;
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
