/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_xml_sax_XErrorHandler_idl__ 
#define __com_sun_star_xml_sax_XErrorHandler_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_xml_sax_SAXException_idl__ 
#include <com/sun/star/xml/sax/SAXException.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module xml {  module sax {  
 
//============================================================================= 
 
/** is the basic interface for SAX error handlers. 
	
	<p>If a SAX application needs to implement customized error handling, 
	it must implement this interface and then register an instance with the
	SAX parser using the parser's <method>XParser::setErrorhandler</method>
	method. The parser will then report all errors and warnings through this
	interface.  </p>

	<p>This interface is a slight adaption of the Java interface
	<code>org.xml.sax.ErrorHandler</code>. In IDL, no exception can be passed 
	as an argument, so an <code>any</code> serves as the container. The type of the 
	exception is <type>SAXParseException</type> or an instance of a derived class.</p>
 */
published interface XErrorHandler: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	/** receives notification of a recoverable error.
	 */
	void error( [in] any aSAXParseException ) 
			raises( com::sun::star::xml::sax::SAXException ); 
 
	//------------------------------------------------------------------------- 
	/** receives notification of a non-recoverable error.
	 */
	void fatalError( [in] any aSAXParseException ) 
			raises( com::sun::star::xml::sax::SAXException ); 
 
	//------------------------------------------------------------------------- 
	/** receives notification of a warning.
	 */
	void warning( [in] any aSAXParseException ) 
			raises( com::sun::star::xml::sax::SAXException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; }; };  

#endif 
