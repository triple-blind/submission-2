/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_sdb_XColumnUpdate_idl__ 
#define __com_sun_star_sdb_XColumnUpdate_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
#ifndef __com_sun_star_util_Date_idl__ 
#include <com/sun/star/util/Date.idl> 
#endif 
 
#ifndef __com_sun_star_util_DateTime_idl__ 
#include <com/sun/star/util/DateTime.idl> 
#endif 
 
#ifndef __com_sun_star_util_Time_idl__ 
#include <com/sun/star/util/Time.idl> 
#endif 
 
 module com {  module sun {  module star {  module io { 
 published interface XInputStream; 
};};};}; 
 
 module com {  module sun {  module star {  module sdb { 
 
 
/** is used to update data which is collected in a row.
 */
published interface XColumnUpdate: com::sun::star::uno::XInterface
{ 
	 
	/** gives a nullable column a null value.
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateNull() raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a boolean value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateBoolean([in]boolean x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a byte value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateByte([in]byte x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a short value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateShort([in]short x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a long value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateInt([in]long x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a hyper value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateLong([in]hyper x) raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
	 
	/** updates a column with a float value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateFloat([in]float x) raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
	 
	/** updates a column with a double value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateDouble([in]double x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a string value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateString([in]string x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a byte array value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateBytes([in]sequence<byte> x) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a Date value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateDate([in]com::sun::star::util::Date x) 
		raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a Time value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateTime([in]com::sun::star::util::Time x) 
		raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a Timestamp value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateTimestamp([in]com::sun::star::util::DateTime x) 
      raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a stream value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateBinaryStream([in]com::sun::star::io::XInputStream x, 
					 		[in]long length) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with a stream value.
		@param x
			the new column value
		@param length
			the length of the stream	
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateCharacterStream([in]com::sun::star::io::XInputStream x, 
					  		   [in]long length) raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with an Object value.
		@param x
			the new column value
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateObject([in]any x) 
      raises (com::sun::star::sdbc::SQLException); 
	//------------------------------------------------------------------------- 
     
	/** updates a column with an Object value.
		@param x
			the new column value
		@param scale
			the scale
		@throws com::sun::star::sdbc::SQLException 
			if a database access error occurs.
	 */
	void updateNumericObject([in]any x, [in]long scale) 
      raises (com::sun::star::sdbc::SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
