/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_accessibility_XAccessibleTextMarkup_idl__
#define __com_sun_star_accessibility_XAccessibleTextMarkup_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif
#ifndef __com_sun_star_lang_IndexOutOfBoundsException_idl__
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#endif
#ifndef __com_sun_star_accessibility_XAccessibleText_idl__
#include <com/sun/star/accessibility/XAccessibleText.idl>
#endif
#ifndef __com_sun_star_accessibility_TextSegment_idl__
#include <com/sun/star/accessibility/TextSegment.idl>
#endif

module com { module sun { module star { module accessibility {

 interface XAccessibleTextMarkup;


/** Implement this interface to expose the text markups of a text.

    <p>The <type>XAccessibleTextMarkup</type> interface is the main interface
    to expose text markups in a text, typically of a text document, that are
    used to reference other (parts of) documents. For supporting the
    <member>XAccessibleTextMarkup::getTextMarkupIndex</member> method of this
    interface and other character related methods of the
    <type>XAccessibleTextMarkup</type> interface, it is necessary to also
    support the <type>XAccessibleText</type> interface.</p>

    @see XAccessibleText

    @since OOo 3.0
*/
interface XAccessibleTextMarkup
    : ::com::sun::star::accessibility::XAccessibleText
{
    /** Returns the number of text markup of the given text markup type
        of a text.

        <p>Throws <type>IllegalArgumentException</type>, if given text
        markup type is out of valid range.</p>

        @param TextMarkupType
            This specifies the type of text markups, whose count should
            be returned - see <type>TextMarkupType</type>.

        @return
            The number of text markup of the given text markup type.
            Returns 0 if there is no text markup.
    */
    long getTextMarkupCount ( [in] long TextMarkupType )
        raises (::com::sun::star::lang::IllegalArgumentException);

    /** Returns the text segment of the text markup of the given index and
        of the given text mark type

        <p>Throws <type>IndexOutOfBoundsException</type>, if given index
        is out of valid range.</p>
        <p>Throws <type>IllegalArgumentException</type>, if given text
        markup type is out of valid range.</p>

        @param TextMarkupIndex
            This index specifies the text markup to return.

        @param TextMarkupType
            This specifies the type of the text markup to be returned - see
            <type>TextMarkupType</type>.

        @return
            If the given index is in range [0..getTextMarkupCount(TextMarkupType)-1],
            the text segment - see <type>TextSegment</type> - of the text markup
            of the given text markup type is returned.
    */
    TextSegment getTextMarkup ( [in] long TextMarkupIndex,
                                [in] long TextMarkupType )
        raises (::com::sun::star::lang::IndexOutOfBoundsException,
                ::com::sun::star::lang::IllegalArgumentException);

    /** returns a sequence of the text segments of the text markups at the given
        character index and of the given text markup type.

        <p>Throws <type>IndexOutOfBoundsException</type>, if given character
        index is out of range [0..number of characters in the text).</p>
        <p>Throws <type>IllegalArgumentException</type>, if given text
        markup type is out of valid range.</p>

        @param CharIndex
            This index specifies the character index in the text.

        @param TextMarkupType
            This specifies the type of the text markups to be returned - see
            <type>TextMarkupType</type>.

        @return
            If character index is in range [0..number of characters in the text-1],
            a seguence of <type>TextSegment</type>s of the text markups at
            given character index of the given text markup type are returned.
            The sequence is empty, if no such text markup is found.
    */
    sequence<TextSegment> getTextMarkupAtIndex ( [in] long CharIndex,
                                                 [in] long TextMarkupType )
        raises (::com::sun::star::lang::IndexOutOfBoundsException,
                ::com::sun::star::lang::IllegalArgumentException);
};

}; }; }; };

#endif
