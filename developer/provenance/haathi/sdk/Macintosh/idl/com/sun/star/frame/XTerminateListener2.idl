/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_frame_XTerminateListener2_idl__
#define __com_sun_star_frame_XTerminateListener2_idl__

#ifndef __com_sun_star_frame_XTerminateListener_idl__
#include <com/sun/star/frame/XTerminateListener.idl>
#endif

//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** extend interface XTerminateListener so a listener will be informed
    in case termination process was cancelled by other reasons.
 */
interface XTerminateListener2 : ::com::sun::star::frame::XTerminateListener
{
	//-------------------------------------------------------------------------
	/** is called when the master environment (e.g., desktop) was cancelled in
        it's terminate request.

        <p>
        Termination can be intercepted by throwing <type>TerminationVetoException</type>.
        But if a listener was queried for termination .. doesnt throwed a veto exception ...
        it doesnt know if termination will be real next time.
        Because any other listener can throw those exception too ... and so it can happen
        that after queryTermination() no notifyTermination() will occure. But these listener
        doesnt know if its allowed to start new processes then.
        Using this optional(!) interface will make it possible to be informed about
        cancelled termination requests also.
        </p>

        @param Event
               describe the source of the event (e.g., the desktop)
	 */
    void cancelTermination( [in] com::sun::star::lang::EventObject Event );
};

//=============================================================================

}; }; }; };

#endif
