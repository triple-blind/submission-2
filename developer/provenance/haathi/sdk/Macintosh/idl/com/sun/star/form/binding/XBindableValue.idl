/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_form_binding_XBindableValue_idl__
#define __com_sun_star_form_binding_XBindableValue_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_form_binding_IncompatibleTypesException_idl__
#include <com/sun/star/form/binding/IncompatibleTypesException.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form { module binding {

interface XValueBinding;

//=============================================================================

/** specifies support for being bound to an external value

    @see XValueBinding
*/
interface XBindableValue : com::sun::star::uno::XInterface
{
	/** sets an external instance which controls the value of the component

        <p>Any previously active binding will be revoked. There can be only one!</p>

        @param aBinding
            the new binding which is to be used by the component. May be <NULL/>,
            in this case only the current binding is revoked.

        @throws <type>IncompatibleTypesException</type>
            if the new binding (provided it's not <NULL/>) supports only types
            which are incompatible with the types of the bindable component.
	 */
	void    setValueBinding( [in] XValueBinding aBinding )
                raises ( IncompatibleTypesException );

	/** retrieves the external instance which currently controls the value of the
        component
    */
    XValueBinding
            getValueBinding( );
};

//=============================================================================

}; }; }; }; };

#endif
