/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_form_binding_XListEntrySource_idl__
#define __com_sun_star_form_binding_XListEntrySource_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_lang_NullPointerException_idl__
#include <com/sun/star/lang/NullPointerException.idl>
#endif
#ifndef __com_sun_star_lang_IndexOutOfBoundsException_idl__
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form { module binding {

interface XListEntryListener;

//=============================================================================

/** specifies a source of string list entries

    <p>The interface supports foreign components which actively retrieve list entries,
    as well as components which want to passively being notified of changes in the list.</p>

    @see XListEntrySink
*/
interface XListEntrySource : com::sun::star::uno::XInterface
{
    /** retrieves the number of entries in the list
    */
    long    getListEntryCount( );

    /** provides access to a single list entry

        @throws <type scope="com::sun::star::lang">IndexOutOfBoundsException</type>
            if the given position does not denote a valid index in the list

        @see getListEntryCount
    */
    string  getListEntry( [in] long Position )
                raises( com::sun::star::lang::IndexOutOfBoundsException );

    /** provides access to the entirety of all list entries
    */
    sequence< string >
            getAllListEntries( );

    /** adds a listener which will be notified about changes in the list
        reflected by the component.

        @throws <type scope="com::sun::star::lang">NullPointerException</type>
            if the given listener is <NULL/>
    */
    void    addListEntryListener( [in] XListEntryListener Listener )
                raises( com::sun::star::lang::NullPointerException );

    /** revokes the given listener from the list of components which will
        be notfiied about changes in the entry list.

        @throws <type scope="com::sun::star::lang">NullPointerException</type>
            if the given listener is <NULL/>
    */
    void    removeListEntryListener( [in] XListEntryListener Listener )
                raises( com::sun::star::lang::NullPointerException );
};

//=============================================================================

}; }; }; }; };

#endif
