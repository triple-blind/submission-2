/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_io_XStreamListener_idl__ 
#define __com_sun_star_io_XStreamListener_idl__ 
 
#ifndef __com_sun_star_lang_XEventListener_idl__ 
#include <com/sun/star/lang/XEventListener.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XStreamListener
/** makes it possible to receive events from an active data control.
 */
published interface XStreamListener: com::sun::star::lang::XEventListener
{ 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XStreamListener::started
	/** gets called as soon as data transfer has started.
	 */
	void started(); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XStreamListener::closed
	/** gets called when data transfer terminates normally or when data
		transfer is terminated from outside.
		
		<p>The termination could be done using the method
		<member>XActiveDataControl::terminate()</member>.</p>
	 */
	void closed(); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XStreamListener::terminated
	/** gets called when <member>XActiveDataControl::terminate()</member> is called.
	 */
	void terminated(); 
 
	//------------------------------------------------------------------------- 
	 
	// DocMerge from xml: method com::sun::star::io::XStreamListener::error
	/** gets called when an internal error in source or sink has occurred.
		
		<p>After the method is called, the close is called on the
		connected streams.</p>
	 */
	void error( [in] any aException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
