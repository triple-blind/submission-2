/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_beans_PropertyChangeEvent_idl__ 
#define __com_sun_star_beans_PropertyChangeEvent_idl__ 
 
#ifndef __com_sun_star_lang_EventObject_idl__ 
#include <com/sun/star/lang/EventObject.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module beans {  
 
//============================================================================= 
 
/** gets delivered whenever a "bound" or "constrained" property is changed.  
	
	<p>A <type>PropertyChangeEvent</type> object is sent as an
	argument to the methods of <type>XPropertyChangeListener</type> 
	and <type>XVetoableChangeListener</type>. </p>
	
	<p>Normally such events contain the name and the old and new 
	value of the changed property.  </p>

	<p>Void values may be provided for the old and new values if their
	true values are not known. </p>
 */
published struct PropertyChangeEvent: com::sun::star::lang::EventObject
{ 
	//------------------------------------------------------------------------- 
	 
	/** contains the unique name of the property which changes its value.
	 */
	string PropertyName; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains <true/> if further events in the same transaction occur.
	 */
	boolean Further; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains the implementation handle for the property.
		
		<p>May be -1 if the implementation has no handle. You can use 
		this handle to get values from the <type>XFastPropertySet</type>.</p>
	 */
	long PropertyHandle; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains the old value of the property.
	 */
	any OldValue; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains the new value of the property.
	 */
	any NewValue; 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
