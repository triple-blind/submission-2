/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_form_XDatabaseParameterBroadcaster_idl__ 
#define __com_sun_star_form_XDatabaseParameterBroadcaster_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_form_XDatabaseParameterListener_idl__ 
#include <com/sun/star/form/XDatabaseParameterListener.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module form {  
 
//============================================================================= 
 
/** provides the possibility of receiving an event for configuration of parameters.
	<p>This interface is usually implemented by components which are to execute a statement,
	and may need parameter information. For example, the 
	<type scope="com::sun::star::form::component">DataForm</type> is such a component. When it is
	bound to a statement which contains parameters, or to a query which is based upon a parametrized
	statement, it needs values to fill in the parameters with actual values when it is being loaded.
	One method to gather these values is calling the <type>XDatabaseParameterListener</type> listeners, which
	can fill them in.</p>
 */
published interface XDatabaseParameterBroadcaster: com::sun::star::uno::XInterface
{ 
	//------------------------------------------------------------------------- 
	 
	/** adds the specified listener, to allow it to fill in necessary parameter values.
		@param aListener
			the listener to add.
		@see com::sun::star::form::XDatabaseParameterListener
	 */
	[oneway] void addParameterListener( [in] com::sun::star::form::XDatabaseParameterListener aListener ); 
 
	//------------------------------------------------------------------------- 
	 
	/** removes the specified listener.
		@param aListener
			the listener to remove.
		@see com::sun::star::form::XDatabaseParameterListener
	 */
	[oneway] void removeParameterListener( [in] com::sun::star::form::XDatabaseParameterListener aListener ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
