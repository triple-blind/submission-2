/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_awt_FocusEvent_idl__ 
#define __com_sun_star_awt_FocusEvent_idl__ 
 
#ifndef __com_sun_star_lang_EventObject_idl__ 
#include <com/sun/star/lang/EventObject.idl> 
#endif 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module awt {  
 
//============================================================================= 
 
/** specifies a keyboard focus event.
			
	<p>There are two levels of focus change events: permanent and temporary.
	Permanent focus change events occur when focus is directly moved
	from one component to another, such as through calls to requestFocus()
	or as the user uses the Tab key to traverse components.
	Temporary focus change events occur when focus is 
	gained or lost for a component as the indirect result of another
	operation, such as window deactivation or a scrollbar drag.  In this
	case, the original focus state will automatically be restored once
	that operation is finished, or for the case of window deactivation,
	when the window is reactivated.  Both permanent and temporary focus
	events are delivered using the FOCUS_GAINED and FOCUS_LOST event ids;
	the levels may be distinguished in the event using the isTemporary()
	method.</p>
 */
published struct FocusEvent: com::sun::star::lang::EventObject
{ 
	//------------------------------------------------------------------------- 
	 
	/** specifies the reason for the focus change as an arithmentic-or 
		combination of <type>FocusChangeReason</type>.

        @see FocusChangeReason
	 */
	short FocusFlags; 
 
	//------------------------------------------------------------------------- 
	 
	/** contains the window which gets the focus on a lose focus event.
	 */
	com::sun::star::uno::XInterface NextFocus; 
 
	//------------------------------------------------------------------------- 
	 
	/** specifies if this focus change event is a temporary change.
	 */
	boolean Temporary; 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
