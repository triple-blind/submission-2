/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_embed_ElementModes_idl__
#define __com_sun_star_embed_ElementModes_idl__


//============================================================================

module com { module sun { module star { module embed {

//============================================================================
/** The constant set contains possible modes to open an element.

	<p>
	The modes can be combined by 'or' operation.
	<const>ElementModes::READ</const> and <const>ElementModes::WRITE</const>
	are base modes. A result mode must include one of base modes.
	</p>

	@see <type>XStorage</type>
*/
published constants ElementModes
{
	//------------------------------------------------------------------------
	/** specifies opening of an element for reading.
	 */
	const long READ = 1;

	//------------------------------------------------------------------------
	/** specifies opening of a seekable element.

		<p>
		This mode is ignored for <type>Storage</type> elements.
		This flag makes sence only in combination with
		<const>ElementModes::READ</const> and/or
		<const>ElementModes::WRITE</const>.
		</p>
	 */
	const long SEEKABLE = 2;

	//------------------------------------------------------------------------
	/** specifies opening of a seekable element for reading.

		<p>
		This is just a combination of the previous two values. For storages
		it is the same as <const>ElementModes::READ</const>.
		</p>
	 */
	const long SEEKABLEREAD = 3;

	//------------------------------------------------------------------------
	/** specifies opening of an element for writing.
	 */
	const long WRITE = 4;

	//------------------------------------------------------------------------
	/** specifies opening of an element for reading and writing.

		<p>
		For a stream element is also specifies that it must be seekable.
		</p>
	 */
	const long READWRITE = 7;

	//------------------------------------------------------------------------
	/** lets the document be truncated immediatelly after opening.

		<p>
		This flag makes sence only in combination with
		<const>ElementModes::WRITE</const>.
		</p>
	 */
	const long TRUNCATE = 8;

	//------------------------------------------------------------------------
	/** restricts creation of a new element on opening in case a requested one
		does not exist.

		<p>
		This flag makes sence only in combination with
		<const>ElementModes::WRITE</const>.
		</p>
	 */
	const long NOCREATE = 16;
};

//============================================================================

}; }; }; };

#endif

