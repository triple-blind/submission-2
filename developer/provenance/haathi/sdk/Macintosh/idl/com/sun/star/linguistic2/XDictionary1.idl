/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_linguistic2_XDictionary1_idl__
#define __com_sun_star_linguistic2_XDictionary1_idl__

#ifndef __com_sun_star_container_XNamed_idl__
#include <com/sun/star/container/XNamed.idl>
#endif

#ifndef __com_sun_star_linguistic2_DictionaryType_idl__
#include <com/sun/star/linguistic2/DictionaryType.idl>
#endif

#ifndef __com_sun_star_linguistic2_XDictionaryEntry_idl__
#include <com/sun/star/linguistic2/XDictionaryEntry.idl>
#endif

#ifndef __com_sun_star_linguistic2_XDictionaryEventListener_idl__
#include <com/sun/star/linguistic2/XDictionaryEventListener.idl>
#endif

//=============================================================================

module com { module sun { module star { module linguistic2 {

//=============================================================================
/**
	@deprecated
*/
published interface XDictionary1 : com::sun::star::container::XNamed
{
	//-------------------------------------------------------------------------
	com::sun::star::linguistic2::DictionaryType getDictionaryType();

	//-------------------------------------------------------------------------
	void setActive( [in] boolean bActivate );

	//-------------------------------------------------------------------------
	boolean isActive();

	//-------------------------------------------------------------------------
	short getCount();

	//-------------------------------------------------------------------------
	short getLanguage();

	//-------------------------------------------------------------------------
	void setLanguage( [in] short nLang );

	//-------------------------------------------------------------------------
	com::sun::star::linguistic2::XDictionaryEntry getEntry( [in] string aWord );

	//-------------------------------------------------------------------------
	boolean addEntry( [in] com::sun::star::linguistic2::XDictionaryEntry xDicEntry );

	//-------------------------------------------------------------------------
	boolean add(
			[in] string aWord,
			[in] boolean bIsNegative,
			[in] string aRplcText );

	//-------------------------------------------------------------------------
	boolean remove( [in] string aWord );

	//-------------------------------------------------------------------------
	boolean isFull();

	//-------------------------------------------------------------------------
	sequence<com::sun::star::linguistic2::XDictionaryEntry> getEntries();

	//-------------------------------------------------------------------------
	void clear();

	//-------------------------------------------------------------------------
	boolean addDictionaryEventListener( [in] com::sun::star::linguistic2::XDictionaryEventListener xListener );

	//-------------------------------------------------------------------------
	boolean removeDictionaryEventListener( [in] com::sun::star::linguistic2::XDictionaryEventListener xListener );

};

//=============================================================================

}; }; }; };

#endif


