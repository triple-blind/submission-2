/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#ifndef __com_sun_star_form_XBoundComponent_idl__ 
#define __com_sun_star_form_XBoundComponent_idl__ 
 
#ifndef __com_sun_star_form_XUpdateBroadcaster_idl__ 
#include <com/sun/star/form/XUpdateBroadcaster.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module form {  
 
//============================================================================= 
 
/**	specifies a (form) component which is bound to a data source.
	
	<p>The interface provides the possibility of committing its respective
	data to a data source it is bound to. A <member>commit</member> will be
	performed by the environment (usually, a <type>FormController</type>).<br/>
	For example, suppose you have a data-bound control that is connected
	to a database field. Each time the control loses its focus, the
	model (component) of the control is triggered by the environment
	to store its value in the database field.</p>

	<p>A commit may fail if an <type>XUpdateListener</type> vetoes the it.</p>

	@see com::sun::star::form::XUpdateListener
 */
published interface XBoundComponent: com::sun::star::form::XUpdateBroadcaster
{ 
	//------------------------------------------------------------------------- 
	 
	/** commits the content of the component into the data source it is bound to.

		@returns
			<TRUE/> when the commitment was successful, otherwise <FALSE/>.
	 */
	boolean commit(); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
