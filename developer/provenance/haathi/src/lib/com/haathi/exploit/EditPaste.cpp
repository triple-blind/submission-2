/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/EditPaste.cpp#1 $
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/EditPaste.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/CloudProvenanceDocument.hpp"
#include "com/haathi/document/DocumentHistory.hpp"
#include "com/haathi/provenance/text/InsertTextProvenance.hpp"
#include "com/haathi/provenance/ProvenanceEvent.hpp"
#include "com/haathi/text/TextHelper.hpp"
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::CloudProvenanceDocument;
using com::haathi::document::DocumentHistory;
using com::haathi::provenance::InsertTextProvenance;
using com::haathi::provenance::ProvenanceEvent;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;
using com::sun::star::text::XTextCursor;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_EDIT_PASTE

EditPaste editPaste;

EditPaste::EditPaste(): uneditedText(OUSTRING("*innocent*")), editedText(OUSTRING("*guilty*")),
		pasted(false), insertAfter(true), invalidateFuture(true) {
	pExploit = this;
	lengthDifference = editedText.getLength() - uneditedText.getLength();
}

void EditPaste::reset(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	pasted = false;
}

bool EditPaste::addProvenanceEvent(CloudProvenanceDocument *cloudProvenanceDocument,
		ProvenanceEvent* provenanceEvent, rtl::OUString documentState) {
	static OUString extra = OUSTRING(" ");

	// If the future should be invalidated, mess up the document state.
	// This will make it less obvious when the paste was hidden.
	// It will also spread the implication around to the next user.
	if (pasted && invalidateFuture)
		return cloudProvenanceDocument->addProvenanceEvent(provenanceEvent, documentState + extra);
	return cloudProvenanceDocument->addProvenanceEvent(provenanceEvent, documentState);
}

// Returns true if suppressed the event
bool EditPaste::push_back(std::vector<ProvenanceEvent*>* result,
 		int insertedPos, rtl::OUString insertedText, DocumentHistory& documentHistory) {
	if (pasted)
		if (insertedText.equals(editedText))
			// This never happens because internal edits do not trigger modifications at this level.
			return true; // Don't do anything when the edited text comes in so no recursion
		else {
			if (insertAfter)
				result->push_back(new InsertTextProvenance(insertedPos + lengthDifference, insertedText));
			else
				result->push_back(new InsertTextProvenance(insertedPos, insertedText));
			return false;
		}
	else
		if (insertedText.equals(uneditedText)) {
			// Put the uneditedText into the event
			result->push_back(new InsertTextProvenance(insertedPos, uneditedText));

			// Put the editedText into the document
			Reference<XTextCursor> xTextCursor = getXText(xComponent)->createTextCursorByRange(getXTextRange(xComponent));
			xTextCursor->goLeft((sal_Int16) uneditedText.getLength(), sal_True);
			xTextCursor->setString(editedText);
			xTextCursor->gotoEnd(sal_False);

			// Fix up the document state and cursor position to match
//			TextHelper textHelper(xComponent);
//			documentHistory.setNewText(textHelper.getString());
//			textHelper.fillRanges(documentHistory.getNewSelectionsForUpdate());

			xComponent.clear();
			return pasted = true;
		}
		else {
			result->push_back(new InsertTextProvenance(insertedPos, insertedText));
			return false;
		}
	return false;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
