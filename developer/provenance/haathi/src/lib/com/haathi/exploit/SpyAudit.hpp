/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/SpyAudit.hpp#1 $
/******************************************************************************
Guard
******************************************************************************/
#ifndef COM__HAATHI__EXPLOIT__SPY_AUDIT
#	define COM__HAATHI__EXPLOIT__SPY_AUDIT
/******************************************************************************
Include
******************************************************************************/
#include "com/haathi/document/DocumentMetaInfo.hpp"
#include "com/haathi/exploit/Exploit.hpp"
#include "com/haathi/utils/StringWrapper.hpp"

#include <string>
#include <vector>
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_SPY_AUDIT

class SpyAudit: public Exploit {
	protected:
		int id;
		com::haathi::document::DocumentMetaInfo* pDocumentMetaInfo;

		bool hacked;
	public:
		SpyAudit(int id);

		virtual bool isEnabled();
		virtual OUString getName() { return OUSTRING("Spy Audit"); }
		virtual void hack();

		void captureDocumentMetaInfo(com::haathi::document::DocumentMetaInfo* pDocumentMetaInfo);
};

extern SpyAudit spyAudit;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/******************************************************************************
Guard
******************************************************************************/
#endif
/*****************************************************************************/
