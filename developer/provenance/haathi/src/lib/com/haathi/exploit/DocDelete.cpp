/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/DocDelete.cpp#1 $
/*

Evolution is messed up in both forward and backward directions.  It depends
on the details, but the playback is often impossible because the letter positions
just aren't there anymore.  Sometime at or before the first letter, though, it
has to resync.  The open event should be good.

*/
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/DocDelete.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/DocumentHistory.hpp"
#include "com/haathi/text/Selection.hpp"
#include "com/haathi/text/TextHelper.hpp"
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::DocumentHistory;
using com::haathi::text::Selection;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;
using com::sun::star::text::XTextCursor;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_DOC_DELETE

DocDelete docDelete();

DocDelete::DocDelete(): hacked(false) {
	pExploit = this;
}

bool DocDelete::isEnabled() {
	if (hacked)
		return false;

	TextHelper textHelper(xComponent);
	std::vector<Selection> selections = textHelper.getSelections();
	
	if (selections.size() != 1)
		return false;
	return selections[0].getText().getLength() > 0;
}

void DocDelete::captureXComponent(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	hacked = false;
}

void DocDelete::captureDocumentHistory(DocumentHistory* pDocumentHistory) {
	this->pDocumentHistory = pDocumentHistory;
}

void DocDelete::release() {
	xComponent.clear();
}

void DocDelete::hack() {
	// Update the documentState so that insert will not be noticed.
	TextHelper textHelper(xComponent);
	OUString oldStateText = pDocumentHistory->getOldText();
	std::vector<Selection> selections = textHelper.getSelections();
	sal_Int32 offset = selections[0].getOffset();
	OUString newStateText = oldStateText.replaceAt(offset, selections[0].getText().getLength(), OUSTRING(""));
	pDocumentHistory->setOldText(newStateText);

	// Delete text into the document as if it had been hacked.
	Reference<XTextCursor> xTextCursor = getXText(xComponent)->createTextCursorByRange(getXTextRange(xComponent));
	xTextCursor->setString(OUSTRING(""));

	hacked = true;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
