/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/HidePaste.cpp#1 $
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/HidePaste.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/CloudProvenanceDocument.hpp"
#include "com/haathi/document/DocumentHistory.hpp"
#include "com/haathi/provenance/text/InsertTextProvenance.hpp"
#include "com/haathi/provenance/ProvenanceEvent.hpp"
#include "com/haathi/text/TextHelper.hpp"
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::CloudProvenanceDocument;
using com::haathi::document::DocumentHistory;
using com::haathi::provenance::InsertTextProvenance;
using com::haathi::provenance::ProvenanceEvent;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;
using com::sun::star::text::XTextCursor;
using com::sun::star::uno::Reference;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_HIDE_PASTE

HidePaste hidePaste;

// Add options to constructor, perhaps default options.
HidePaste::HidePaste(): textToHide(OUSTRING("*secret*  ")), pasted(false),
		insertAfter(true), invalidateFuture(true) {
	pExploit = this;
	textLength = textToHide.getLength();
}

bool HidePaste::isEnabled() {
	return !pasted;
}

void HidePaste::reset(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	pasted = false;
}

void HidePaste::setDocumentHistory(DocumentHistory* pDocumentHistory) {
	this->pDocumentHistory = pDocumentHistory;
}

void HidePaste::hack() {
	// Simulate a paste command, but suppress it, by doing nothing.

	// Update the documentState so that insert will not be noticed.
	TextHelper textHelper(xComponent);
	OUString oldText = pDocumentHistory->getOldText();
	// Need to make sure selection is current
	textHelper.fillRanges(pDocumentHistory->getOldSelectionsForUpdate());
	sal_Int32 left = pDocumentHistory->getOldSelections()[0].getLeft();
	OUString newText = oldText.replaceAt(left, 0, textToHide);
	pDocumentHistory->setOldText(newText);

	// Insert text into the document as if it had been pasted.
	Reference<XTextCursor> xTextCursor = getXText(xComponent)->createTextCursorByRange(getXTextRange(xComponent));
	xTextCursor->setString(textToHide);

	xComponent.clear();
	pasted = true;
}

// Attempt to devolve subsequent events to hide hack.
bool HidePaste::addProvenanceEvent(CloudProvenanceDocument *cloudProvenanceDocument,
		ProvenanceEvent* provenanceEvent, rtl::OUString documentState) {
	static OUString extra = OUSTRING(" ");

	// If the future should be invalidated, mess up the document state.
	// This will make it less obvious when the paste was hidden.
	// It will also spread the implication around to the next user.
	if (pasted && invalidateFuture)
		return cloudProvenanceDocument->addProvenanceEvent(provenanceEvent, documentState + extra);
	return cloudProvenanceDocument->addProvenanceEvent(provenanceEvent, documentState);
}

// This is just an example of inserting characters after the "pasted" text.
bool HidePaste::push_back(std::vector<ProvenanceEvent*>* result,
		int insertedPos, rtl::OUString insertedText) {
	if (pasted && insertAfter)
		// This will help hide the pasted text during the interactive audit.
		// It will help if the user types at least textLength characters after the paste.
		result->push_back(new InsertTextProvenance(insertedPos - textLength, insertedText));
	else
		// This is the normal situation with no change of insertion point
		result->push_back(new InsertTextProvenance(insertedPos, insertedText));
	return false;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
