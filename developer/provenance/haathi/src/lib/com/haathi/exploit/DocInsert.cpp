/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/DocInsert.cpp#1 $
/*

In general, this invalidates the evolution of the document version up through
the event just after the insertion.  After that, we are back in sync.

To invalidate the entire document version, then save right after and that
seems to get that event as well.  This can make it look like any of the
previous users, whose versions will also be invalidated.

This might be combined with the DEVOLVE_AFTER to blame the next person.

*/
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/DocInsert.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/DocumentHistory.hpp"
#include "com/haathi/text/TextHelper.hpp"
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::DocumentHistory;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;
using com::sun::star::text::XTextCursor;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_DOC_INSERT

DocInsert docInsert(OUSTRING("*docText*"));

DocInsert::DocInsert(OUString docText): docText(docText), hacked(false) {
	pExploit = this;
}

bool DocInsert::isEnabled() {
	return !hacked;
}

void DocInsert::captureXComponent(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	hacked = false;
}

void DocInsert::captureDocumentHistory(DocumentHistory* pDocumentHistory) {
	this->pDocumentHistory = pDocumentHistory;
}

void DocInsert::release() {
	xComponent.clear();
}

void DocInsert::hack() {
	// Update the documentState so that insert will not be noticed.
	TextHelper textHelper(xComponent);
	OUString oldStateText = pDocumentHistory->getOldText();
	std::vector<Selection> selections = textHelper.getSelections();
	sal_Int32 offset = selections[0].getOffset();
	OUString newStateText = oldStateText.replaceAt(offset, 0, docText);
	pDocumentHistory->setOldText(newStateText);

	// Insert text into the document as if it had been hacked.
	Reference<XTextCursor> xTextCursor = getXText(xComponent)->createTextCursorByRange(getXTextRange(xComponent));
	xTextCursor->setString(docText);

	hacked = true;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
