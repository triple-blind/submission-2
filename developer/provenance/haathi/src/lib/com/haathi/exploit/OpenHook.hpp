/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/OpenHook.hpp#1 $
/******************************************************************************
Guard
******************************************************************************/
#ifndef COM__HAATHI__EXPLOIT__OPEN_HOOK
#	define COM__HAATHI__EXPLOIT__OPEN_HOOK
/******************************************************************************
Include
******************************************************************************/
#include "com/haathi/crypto/Encryptor.hpp"
#include "com/haathi/exploit/Exploit.hpp"
#include "com/haathi/utils/StringWrapper.hpp"

#include <string>
#include <vector>
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace document {
			class CloudProvenanceDocument;
		};
	};
};

namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_OPEN_HOOK

class OpenHook: public Exploit {
	protected:
		com::haathi::document::CloudProvenanceDocument* pCloudProvenanceDocument;
		std::string spy;
		std::vector<std::string>* pChecksumHashComponents;
		int index;
		com::haathi::crypto::Encryptor* pEncryptor;

		OUString evtText;
		bool hacked;

	public:
		OpenHook(std::string spy);

		virtual bool isEnabled();
		virtual OUString getName() { return OUSTRING("Open Hook"); }
		virtual void hack();

		void captureCloudProvenanceDocument(com::haathi::document::CloudProvenanceDocument* pCloudProvenanceDocument);
		void captureChecksumHashComponents(std::vector<std::string>* pChecksumHashComponents, int index);
		void captureEncryptor(com::haathi::crypto::Encryptor* pEncryptor);
};

extern OpenHook openHook;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/******************************************************************************
Guard
******************************************************************************/
#endif
/*****************************************************************************/
