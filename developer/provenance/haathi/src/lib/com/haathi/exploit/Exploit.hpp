/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/Exploit.hpp#1 $
/******************************************************************************
Guard
******************************************************************************/
#ifndef COM__HAATHI__EXPLOIT__EXPLOIT
#	define COM__HAATHI__EXPLOIT__EXPLOIT
/******************************************************************************
Include
******************************************************************************/
#include "com/haathi/utils/StringWrapper.hpp"

#include "Config.hpp"

#include "sdkBeg.hpp"
#include <com/sun/star/lang/XComponent.hpp>
#include <com/sun/star/text/XText.hpp>
#include <com/sun/star/text/XTextRange.hpp>
#include "sdkEnd.hpp"
/******************************************************************************
Define
******************************************************************************/
#define EXPLOIT_OFF             0

#define EXPLOIT_NONE            0

#define EXPLOIT_DOC_INSERT      11 // Insert docText into document without matching event
#define EXPLOIT_EVT_INSERT      12 // Generate an event for the feigned insertion of evtText into the document
#define EXPLOIT_MIX_INSERT      13 // Insert docText into document but use evtText for the event

#define EXPLOIT_DOC_DELETE      21 // Delete docText from document without matching event
#define EXPLOIT_EVT_DELETE      22 // Generate an event for the feigned deletion of evtText from the document
#define EXPLOIT_MIX_DELETE      23 // Delete docText from the document but use evtText for the event

#define EXPLOIT_OPEN_HOOK       61 // Add events before the document gets opened
#define EXPLOIT_SAVE_HOOK       62 // Add events after the document gets saved
#define EXPLOIT_EDIT_HOOK       63 // Make it look like the document has been saved and reopened

#define EXPLOIT_SPY_SHARE                71 // Change the names in the share event
#define EXPLOIT_SPY_CREATE               72 // Change the names in the document creation event
#define EXPLOIT_SPY_AUDIT                73 // Change the names in the keying material where auditors are stored
#define EXPLOIT_SPY_PRINCIPAL_IDENTIFIER 74 // Change the name of the individual creating the events

#define EXPLOIT_CLOCK           81  // Manipulate the clock

#define EXPLOIT_HIDE_PASTE      101 // Essentially EXPLOIT_DOC_INSERT, but purposely invalidates events in both directions
#define EXPLOIT_EDIT_PASTE      102 // Essentially EXPLOIT_MIX_INSERT
#define EXPLOIT_SPACE_PASTE     103 // Essentially EXPLOIT_HIDE_PASTE but uses a barely noticeable space character

#define EXPLOIT_EARLY_SHARE     111 // Share a document with someone who is not a registered sharer

#define EXPLOIT EXPLOIT_CLOCK

#if !defined(EXPLOIT)
#	define EXPLOIT EXPLOIT_NONE
#endif

#if OSYS == OSYS_WIN
	// Without this code, there is an empty compilation unit and complaint
#	define DUMMY_CODE namespace { char dummy; }
#else
	// With the above code, there is an unused variable and complaint
#	define DUMMY_CODE
#endif
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
class Exploit {
	protected:
		Reference<com::sun::star::text::XText> getXText(Reference<com::sun::star::lang::XComponent> xComponent);
		Reference<com::sun::star::text::XTextRange> getXTextRange(Reference<com::sun::star::lang::XComponent> xComponent);
	public:
		virtual ~Exploit() { }

		virtual bool isEnabled() { return false; }
		virtual OUString getName() { return OUSTRING(""); }
		virtual void hack() { };
		// This is implemented in parts because different objects
		// will deliver different parts of the configuration.
		// virtual void capture() { };
		virtual void release() { };
};

extern Exploit* pExploit;
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/******************************************************************************
Guard
******************************************************************************/
#endif
/*****************************************************************************/
