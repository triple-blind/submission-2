/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/MixDelete.cpp#1 $
/*

If the deleted document text length matches the event text length, then the errors
extend up to the deletion and down to the start of the insertion of the deleted text.
This errors can be hidden by storing the document state used in their calculations
and then calculating the document states by working backwards to get the document
state values needed for all the previous events.

*/
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/MixDelete.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/CloudProvenanceDocument.hpp"
#include "com/haathi/text/Selection.hpp"
#include "com/haathi/provenance/text/DeleteTextProvenance.hpp"
#include "com/haathi/document/DocumentHistory.hpp"
#include "com/haathi/text/TextHelper.hpp"

#include <vector>
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::CloudProvenanceDocument;
using com::haathi::document::DocumentHistory;
using com::haathi::provenance::DeleteTextProvenance;
using com::haathi::text::Selection;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;
using com::sun::star::text::XTextCursor;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_MIX_DELETE

MixDelete mixDelete(OUSTRING("*evtText*"));

MixDelete::MixDelete(OUString evtText): evtText(evtText), hacked(false) {
	pExploit = this;
}

bool MixDelete::isEnabled() {
	if (hacked)
		return false;

	TextHelper textHelper(xComponent);
	std::vector<Selection> selections = textHelper.getSelections();
	
	if (selections.size() != 1)
		return false;
	return selections[0].getText().getLength() > 0;
}

void MixDelete::captureXComponent(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	hacked = false;
}

void MixDelete::captureDocumentHistory(DocumentHistory* pDocumentHistory) {
	this->pDocumentHistory = pDocumentHistory;
}

void MixDelete::captureCloudProvenanceDocument(CloudProvenanceDocument* pCloudProvenanceDocument) {
	this->pCloudProvenanceDocument = pCloudProvenanceDocument;
}

void MixDelete::release() {
	xComponent.clear();
}

void MixDelete::hack() {
	TextHelper textHelper(xComponent);
	OUString oldStateText;
	OUString newStateText;
	sal_Int32 offset;

	// Here's the docText
	{
		// Update the documentState so that insert will not be noticed.
		/*OUString*/ oldStateText = pDocumentHistory->getOldText();
		std::vector<Selection> selections = textHelper.getSelections();
		/*sal_Int32*/ offset = selections[0].getOffset();
		/*OUString*/ newStateText = oldStateText.replaceAt(offset, selections[0].getText().getLength(), OUSTRING(""));
		pDocumentHistory->setOldText(newStateText);

		// Delete text into the document as if it had been hacked.
		Reference<XTextCursor> xTextCursor = getXText(xComponent)->createTextCursorByRange(getXTextRange(xComponent));
		xTextCursor->setString(OUSTRING(""));
	}

	// And then the evtText
	{
		// Add the event
		DeleteTextProvenance* insertTextProvenance = new DeleteTextProvenance((int) offset, evtText);
		// This will use what is currently in the document
		pCloudProvenanceDocument->addProvenanceEvent(insertTextProvenance);
	}

	hacked = true;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
