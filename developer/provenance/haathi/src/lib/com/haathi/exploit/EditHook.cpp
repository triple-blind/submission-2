/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/EditHook.cpp#1 $
/*


*/
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/EditHook.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/CloudProvenanceDocument.hpp"
#include "com/haathi/provenance/document/OpenDocumentProvenance.hpp"
#include "com/haathi/provenance/document/PrintDocumentProvenance.hpp"
#include "com/haathi/provenance/document/SaveDocumentProvenance.hpp"
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::crypto::Encryptor;
using com::haathi::document::CloudProvenanceDocument;
using com::haathi::provenance::OpenDocumentProvenance;
using com::haathi::provenance::PrintDocumentProvenance;
using com::haathi::provenance::SaveDocumentProvenance;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_EDIT_HOOK

EditHook editHook(std::string("spy@provenance.com"));

EditHook::EditHook(std::string spy): spy(spy), hacked(false) {
	pExploit = this;
}

bool EditHook::isEnabled() {
	return !hacked;
}

void EditHook::captureCloudProvenanceDocument(CloudProvenanceDocument* pCloudProvenanceDocument) {
	this->pCloudProvenanceDocument = pCloudProvenanceDocument;
}

void EditHook::captureChecksumHashComponents(std::vector<std::string>* pChecksumHashComponents, int index) {
	this->pChecksumHashComponents = pChecksumHashComponents;
	this->index = index;
}

void EditHook::captureEncryptor(Encryptor* pEncryptor) {
	this->pEncryptor = pEncryptor;
}

void EditHook::hack() {
	std::string principalIdentifier = (*pChecksumHashComponents)[index];

	pCloudProvenanceDocument->addProvenanceEvent(new SaveDocumentProvenance());
	pEncryptor->wait();
	(*pChecksumHashComponents)[index] = spy;

	pCloudProvenanceDocument->addProvenanceEvent(new OpenDocumentProvenance());
	pCloudProvenanceDocument->addProvenanceEvent(new PrintDocumentProvenance("Print"));
	pCloudProvenanceDocument->addProvenanceEvent(new SaveDocumentProvenance());

	pEncryptor->wait();
	(*pChecksumHashComponents)[index] = principalIdentifier;
	pCloudProvenanceDocument->addProvenanceEvent(new OpenDocumentProvenance());

	hacked = true;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
