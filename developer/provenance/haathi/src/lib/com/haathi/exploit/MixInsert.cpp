/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/MixInsert.cpp#1 $
/*

If the evtText and docText can be kept to the same length, possibly by padding
the evtText, this exploit is not detected with either auditor.  This is because
they work backwards and undoing the faked event with evtText results in the same
document as would have the real event with docText.  We would need to work in
both directions to prevent this.  We can also diff the audited document with the
edited document and not the difference when then events are played forward.

*/
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/MixInsert.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/CloudProvenanceDocument.hpp"
#include "com/haathi/text/Selection.hpp"
#include "com/haathi/provenance/text/InsertTextProvenance.hpp"
#include "com/haathi/document/DocumentHistory.hpp"
#include "com/haathi/text/TextHelper.hpp"

#include <vector>
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::CloudProvenanceDocument;
using com::haathi::document::DocumentHistory;
using com::haathi::provenance::InsertTextProvenance;
using com::haathi::text::Selection;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;
using com::sun::star::text::XTextCursor;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_MIX_INSERT

MixInsert mixInsert(OUSTRING("*docText*"), OUSTRING("*evtText*"));

MixInsert::MixInsert(OUString docText, OUString evtText): docText(docText), evtText(evtText), hacked(false) {
	pExploit = this;
}

bool MixInsert::isEnabled() {
	return !hacked;
}

void MixInsert::captureXComponent(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	hacked = false;
}

void MixInsert::captureDocumentHistory(DocumentHistory* pDocumentHistory) {
	this->pDocumentHistory = pDocumentHistory;
}

void MixInsert::captureCloudProvenanceDocument(CloudProvenanceDocument* pCloudProvenanceDocument) {
	this->pCloudProvenanceDocument = pCloudProvenanceDocument;
}

void MixInsert::release() {
	xComponent.clear();
}

void MixInsert::hack() {
	TextHelper textHelper(xComponent);
	OUString oldStateText;
	OUString newStateText;
	sal_Int32 offset;

	// Here's the docText
	{
		// Update the documentState so that insert will not be noticed.
		//TextHelper textHelper(xComponent);
		/*OUString*/ oldStateText = pDocumentHistory->getOldText();
		// Need to make sure selection is current
		std::vector<Selection> selections = textHelper.getSelections();
		/*sal_Int32*/ offset = selections[0].getOffset();
		/*OUString*/ newStateText = oldStateText.replaceAt(offset, 0, docText);
		pDocumentHistory->setOldText(newStateText);

		// Insert text into the document as if it had been hacked.
		Reference<XTextCursor> xTextCursor = getXText(xComponent)->createTextCursorByRange(getXTextRange(xComponent));
		xTextCursor->setString(docText);
	}

	// And then the evtText
	{
		// Add the event
		InsertTextProvenance* insertTextProvenance = new InsertTextProvenance((int) offset, evtText);
		// This will use what is currently in the document
		pCloudProvenanceDocument->addProvenanceEvent(insertTextProvenance);
	}

	hacked = true;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
