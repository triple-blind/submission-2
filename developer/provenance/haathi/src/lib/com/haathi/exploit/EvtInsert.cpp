/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/EvtInsert.cpp#1 $
/*

In general, this produces an invalid event that fails the evolution test.
When the event is played forward, the audit is messed up.

*/
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/EvtInsert.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/document/CloudProvenanceDocument.hpp"
#include "com/haathi/text/Selection.hpp"
#include "com/haathi/provenance/text/InsertTextProvenance.hpp"
#include "com/haathi/text/TextHelper.hpp"

#include <vector>
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::document::CloudProvenanceDocument;
using com::haathi::provenance::InsertTextProvenance;
using com::haathi::text::Selection;
using com::haathi::text::TextHelper;

using com::sun::star::lang::XComponent;

using namespace com::sun::star::uno;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_EVT_INSERT

EvtInsert evtInsert(OUSTRING("*evtText*"));

EvtInsert::EvtInsert(OUString evtText): evtText(evtText), hacked(false) {
	pExploit = this;
}

bool EvtInsert::isEnabled() {
	return !hacked;
}

void EvtInsert::captureXComponent(Reference<XComponent> xComponent) {
	this->xComponent = xComponent;
	hacked = false;
}

void EvtInsert::captureCloudProvenanceDocument(CloudProvenanceDocument* pCloudProvenanceDocument) {
	this->pCloudProvenanceDocument = pCloudProvenanceDocument;
}

void EvtInsert::release() {
	xComponent.clear();
}

void EvtInsert::hack() {
	// Find out where the cursor is
	TextHelper textHelper(xComponent);
	std::vector<Selection> selections = textHelper.getSelections();
	sal_Int32 offset = selections[0].getOffset();

	// Add the event
	InsertTextProvenance* insertTextProvenance = new InsertTextProvenance((int) offset, evtText);
	pCloudProvenanceDocument->addProvenanceEvent(insertTextProvenance);

	hacked = true;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
