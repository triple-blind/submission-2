/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/haathi/src/lib/com/haathi/exploit/SpyAudit.cpp#1 $
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/exploit/SpyAudit.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/crypto/CryptoInfo.hpp"

#include <map>
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/
using com::haathi::crypto::CryptoInfo;
using com::haathi::document::DocumentMetaInfo;
/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace exploit {
/******************************************************************************
Class
******************************************************************************/
#if EXPLOIT == EXPLOIT_SPY_AUDIT

SpyAudit spyAudit(-1);

SpyAudit::SpyAudit(int id): id(id), hacked(false) {
	pExploit = this;
}

bool SpyAudit::isEnabled() {
	return false;
}


void SpyAudit::captureDocumentMetaInfo(DocumentMetaInfo* pDocumentMetaInfo) {
	this->pDocumentMetaInfo = pDocumentMetaInfo;
}

void SpyAudit::hack() {
	std::map<int, CryptoInfo>& auditorList(pDocumentMetaInfo->auditorList);
	// Take known good values from here and change later.
	com::haathi::crypto::CryptoInfo cryptoInfo = auditorList.begin()->second;

	// This is the spy.  It's someone with an unknown id.
	pDocumentMetaInfo->auditorList[-1] = cryptoInfo;
}

#else

	DUMMY_CODE;

#endif
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
