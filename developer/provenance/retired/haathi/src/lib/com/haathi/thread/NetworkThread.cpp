/******************************************************************************
Header
******************************************************************************/
// $Header: //MyDataDepot/Projects/provenance-autoType2/retired/haathi/src/lib/com/haathi/thread/NetworkThread.cpp#1 $

/*
 *  Created by Aaron Gibson on 3/17/12.
 */
/******************************************************************************
Include self
******************************************************************************/
#include "com/haathi/thread/NetworkThread.hpp"
/******************************************************************************
Include others
******************************************************************************/
#include "com/haathi/utils/StringWrapper.hpp"
/******************************************************************************
Define
******************************************************************************/

/******************************************************************************
Using
******************************************************************************/

/******************************************************************************
Namespace
******************************************************************************/
namespace com {
	namespace haathi {
		namespace thread {
/******************************************************************************
Class
******************************************************************************/
NetworkThread::NetworkThread(com::haathi::network::NetworkInfo cloud_info,
		SynchronizedQueue<std::string>* input_queue):
		_cloud_info(cloud_info),_input_queue(input_queue) {

}

NetworkThread::~NetworkThread() {

}

void NetworkThread::run() {
	while (1) {

		std::string result;
		result = _input_queue->dequeue();
		std::cout << result << std::endl;

		// We yield to make sure that the other threads have time to run, if need be.
		yield();
	}
}
/******************************************************************************
Namespace
******************************************************************************/
		};
	};
};
/*****************************************************************************/
